# KDE tags expanded automatically by am_edit - $Revision: 1.15 $ 
# Makefile.in generated by automake 1.6.3 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



####### kdevelop will overwrite this part!!! (begin)##########
SHELL = /bin/sh

srcdir = .
top_srcdir = ..

prefix = /usr
exec_prefix = ${prefix}

bindir = ${exec_prefix}/bin
sbindir = ${exec_prefix}/sbin
libexecdir = ${exec_prefix}/libexec
datadir = ${prefix}/share
sysconfdir = ${prefix}/etc
sharedstatedir = ${prefix}/com
localstatedir = ${prefix}/var
libdir = ${exec_prefix}/lib
infodir = ${prefix}/share/info
mandir = ${prefix}/share/man
includedir = ${prefix}/include
oldincludedir = /usr/include
pkgdatadir = $(datadir)/qgo
pkglibdir = $(libdir)/qgo
pkgincludedir = $(includedir)/qgo
top_builddir = ..

ACLOCAL = ${SHELL} /usr/local/src/qgo-1.5.4/admin/missing --run aclocal-1.6
AUTOCONF = ${SHELL} /usr/local/src/qgo-1.5.4/admin/missing --run autoconf
AUTOMAKE = ${SHELL} /usr/local/src/qgo-1.5.4/admin/missing --run automake-1.6
AUTOHEADER = ${SHELL} /usr/local/src/qgo-1.5.4/admin/missing --run autoheader

am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c -p
INSTALL_PROGRAM = ${INSTALL} $(INSTALL_STRIP_FLAG)
INSTALL_DATA = ${INSTALL} -m 644
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_SCRIPT = ${INSTALL}
INSTALL_HEADER = $(INSTALL_DATA)
transform = s,x,x,
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_alias = 
build_triplet = x86_64-unknown-linux-gnu
host_alias = 
host_triplet = x86_64-unknown-linux-gnu
target_alias = 
target_triplet = x86_64-unknown-linux-gnu

EXEEXT = 
OBJEXT = o
PATH_SEPARATOR = :
AMTAR = ${SHELL} /usr/local/src/qgo-1.5.4/admin/missing --run tar
ARTSCCONFIG = @ARTSCCONFIG@
AS = @AS@
AUTODIRS = @AUTODIRS@
AWK = gawk
CC = gcc
CONF_FILES = @CONF_FILES@
CPP = gcc -E
CXX = g++
CXXCPP = g++ -E
DCOPIDL = @DCOPIDL@
DCOPIDL2CPP = @DCOPIDL2CPP@
DCOP_DEPENDENCIES = @DCOP_DEPENDENCIES@
DEPDIR = .deps
DLLTOOL = @DLLTOOL@
DPMSINC = @DPMSINC@
DPMSLIB = @DPMSLIB@
GCJ = @GCJ@
GCJFLAGS = @GCJFLAGS@
GLINC = @GLINC@
GLLIB = @GLLIB@
GMSGFMT = /usr/bin/msgfmt
IDL = @IDL@
IDL_DEPENDENCIES = @IDL_DEPENDENCIES@
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
JAR = @JAR@
JAVAC = @JAVAC@
JAVAH = @JAVAH@
JVMLIBS = @JVMLIBS@
KDECONFIG = @KDECONFIG@
KDE_CXXFLAGS = 
KDE_EXTRA_RPATH = @KDE_EXTRA_RPATH@
KDE_INCLUDES = @KDE_INCLUDES@
KDE_LDFLAGS = @KDE_LDFLAGS@
KDE_MT_LDFLAGS = 
KDE_MT_LIBS = -lpthread
KDE_PLUGIN = -avoid-version -module -no-undefined $(KDE_RPATH) $(KDE_MT_LDFLAGS)
KDE_RPATH = @KDE_RPATH@
KDE_USE_CLOSURE_FALSE = #
KDE_USE_CLOSURE_TRUE = 
KDE_USE_FINAL_FALSE = 
KDE_USE_FINAL_TRUE = #
KDE_XSL_STYLESHEET = @KDE_XSL_STYLESHEET@
LEX = @LEX@
LEXLIB = @LEXLIB@
LEX_OUTPUT_ROOT = @LEX_OUTPUT_ROOT@
LIBCOMPAT = 
LIBCRYPT = -lcrypt
LIBDL = -ldl
LIBGEN = @LIBGEN@
LIBJPEG = -ljpeg
LIBMICO = @LIBMICO@
LIBOBJS = 
LIBPNG = -lpng -lz -lm
LIBPTHREAD = -lpthread
LIBPYTHON = @LIBPYTHON@
LIBQIMGIO = @LIBQIMGIO@
LIBRESOLV = -lresolv
LIBSHADOW = @LIBSHADOW@
LIBSM = -lSM -lICE
LIBSOCKET =  -lresolv
LIBTIFF = @LIBTIFF@
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIBUCB = 
LIBUTIL = -lutil
LIBXINERAMA = 
LIBZ = -lz
LIB_KAB = @LIB_KAB@
LIB_KDECORE = @LIB_KDECORE@
LIB_KDEPRINT = @LIB_KDEPRINT@
LIB_KDEUI = @LIB_KDEUI@
LIB_KFILE = @LIB_KFILE@
LIB_KFM = @LIB_KFM@
LIB_KHTML = @LIB_KHTML@
LIB_KIMGIO = @LIB_KIMGIO@
LIB_KIO = @LIB_KIO@
LIB_KPARTS = @LIB_KPARTS@
LIB_KSPELL = @LIB_KSPELL@
LIB_KSYCOCA = @LIB_KSYCOCA@
LIB_QPE = 
LIB_QT = -lqt-mt  $(LIBPNG) -lXext $(LIB_X11) $(LIBSM) -lpthread
LIB_QTOPIA = @LIB_QTOPIA@
LIB_SMB = @LIB_SMB@
LIB_X11 = -lX11 $(LIBSOCKET)
LIB_XEXT = -lXext
LN_S = ln -s
MCOPIDL = @MCOPIDL@
MEINPROC = @MEINPROC@
MICO_INCLUDES = @MICO_INCLUDES@
MICO_LDFLAGS = @MICO_LDFLAGS@
MOC = /usr/lib64/qt-3.3/bin/moc
MSGFMT = /usr/bin/msgfmt
NOOPT_CFLAGS =  -g
NOOPT_CXXFLAGS =  -fno-exceptions -fno-check-new
NOREPO = -fno-repo
OBJDUMP = @OBJDUMP@
PACKAGE = qgo
PAMLIBS = @PAMLIBS@
PASSWDLIBS = @PASSWDLIBS@
PYTHONINC = @PYTHONINC@
PYTHONLIB = @PYTHONLIB@
PYTHONMODDIR = @PYTHONMODDIR@
QTE_NORTTI = 
QTOPIA_INCLUDES = @QTOPIA_INCLUDES@
QT_INCLUDES = -I/usr/lib64/qt-3.3/include
QT_LDFLAGS = -L/usr/lib64/qt-3.3/lib
RANLIB = ranlib
REPO = -frepo
SETUIDFLAGS = @SETUIDFLAGS@
STRIP = strip
TOPSUBDIRS =  html src templates
UIC = /usr/lib64/qt-3.3/bin/uic -L $(kde_widgetdir) -nounload
UIC_TR = tr2i18n
USER_INCLUDES = 
USER_LDFLAGS = 
USE_EXCEPTIONS = -fexceptions
USE_RTTI = 
USE_THREADS = 
VERSION = 0.2.2
WOVERLOADED_VIRTUAL = 
XGETTEXT = /usr/bin/xgettext
XPMINC = @XPMINC@
XPMLIB = @XPMLIB@
X_EXTRA_LIBS =  -lresolv
X_INCLUDES = -I.
X_LDFLAGS = -L/usr/lib
X_PRE_LIBS = 
all_includes = -I/usr/lib64/qt-3.3/include -I.
all_libraries = -L/usr/lib -L/usr/lib64/qt-3.3/lib
am__include = include
am__quote = 
idldir = @idldir@
install_sh = /usr/local/src/qgo-1.5.4/admin/install-sh
jni_includes = @jni_includes@
kde_appsdir = @kde_appsdir@
kde_bindir = @kde_bindir@
kde_confdir = @kde_confdir@
kde_datadir = @kde_datadir@
kde_htmldir = @kde_htmldir@
kde_icondir = @kde_icondir@
kde_includes = @kde_includes@
kde_libraries = @kde_libraries@
kde_libs_htmldir = @kde_libs_htmldir@
kde_libs_prefix = @kde_libs_prefix@
kde_locale = @kde_locale@
kde_mimedir = @kde_mimedir@
kde_moduledir = @kde_moduledir@
kde_qtver = 3
kde_servicesdir = @kde_servicesdir@
kde_servicetypesdir = @kde_servicetypesdir@
kde_sounddir = @kde_sounddir@
kde_styledir = @kde_styledir@
kde_templatesdir = @kde_templatesdir@
kde_wallpaperdir = @kde_wallpaperdir@
kde_widgetdir = @kde_widgetdir@
micodir = @micodir@
qt_includes = /usr/lib64/qt-3.3/include
qt_libraries = /usr/lib64/qt-3.3/lib
x_includes = .
x_libraries = /usr/lib

INCLUDES = $(all_includes)

#>- qgo_METASOURCES = AUTO

KDE_OPTIONS = qtonly

EXTRA_DIST = board.cpp board.h boardhandler.cpp boardhandler.h compiling.txt config.h defines.h gamedialog.cpp gamedialog.h gameinfo_gui.ui gamestable.cpp gamestable.h gametree.cpp gametree.h globals.h group.cpp group.h gs_globals.h gui_dialog.ui helpviewer.cpp helpviewer.h icons.h igsconnection.cpp igsconnection.h igsinterface.h imagehandler.cpp imagehandler.h interfacehandler.cpp interfacehandler.h komispinbox.h main.cpp main.cpp.bak main.pro maintable.cpp maintable.h main_trans.pro mainwidget.cpp mainwidget_gui.ui mainwidget.h mainwin.cpp mainwindow.cpp mainwindow.h mainwin.h mark.cpp mark.h matrix.cpp matrix.h misc.cpp misc.h move.cpp move.h msg_handler.cpp msg_handler.h newgame_gui.ui newlocalgame_gui.ui noderesults.cpp noderesults_gui.ui noderesults.h normaltools_gui.ui nthmove_gui.ui parser.cpp parserdefs.h parser.h playertable.cpp playertable.h preferences.cpp preferences_gui.ui preferences.h qgo23.dsw qgo.cpp qgo.dsw qgo.h qgo_interface.cpp qgo_interface.h qgo.pro qgo.rc scoretools_gui.ui setting.cpp setting.h sgfparser.cpp sgfparser.h startupframe.cpp startupframe_gui.ui startupframe.h stone.cpp stone.h stonehandler.cpp stonehandler.h tables.cpp tables.h telnet.cpp telnet.h textedit_gui.ui textview.cpp textview_gui.ui textview.h tip.cpp tip.h tree.cpp tree.h wavfile.c wavfile.h wavplay.c wavplay.h xmlparser.cpp xmlparser.h qnewgamedlg.cpp qnewgamedlg.h qgtp.cpp qgtp.h qnewgamedlg_gui.ui clientwindow_gui.ui talk_gui.ui 

####### kdevelop will overwrite this part!!! (end)############
bin_PROGRAMS = qgo
#>- qgo_SOURCES = board.cpp boardhandler.cpp clientwindow_gui.ui gamedialog.cpp \
#>- gameinfo_gui.ui gamestable.cpp gametree.cpp group.cpp gui_dialog.ui helpviewer.cpp \
#>- igsconnection.cpp imagehandler.cpp interfacehandler.cpp main.cpp maintable.cpp \
#>- mainwidget.cpp mainwidget_gui.ui mainwin.cpp mainwindow.cpp mark.cpp matrix.cpp \
#>- misc.cpp move.cpp msg_handler.cpp newgame_gui.ui newlocalgame_gui.ui \
#>- noderesults.cpp noderesults_gui.ui normaltools_gui.ui nthmove_gui.ui parser.cpp \
#>- playertable.cpp preferences.cpp preferences_gui.ui qgo.cpp qgo_interface.cpp qgtp.cpp \
#>- qnewgamedlg.cpp qnewgamedlg_gui.ui scoretools_gui.ui setting.cpp sgfparser.cpp \
#>- stone.cpp stonehandler.cpp tables.cpp talk_gui.ui telnet.cpp textedit_gui.ui \
#>- textview.cpp textview_gui.ui tip.cpp tree.cpp wavfile.c wavplay.c xmlparser.cpp \
#>- searchpath.cpp
#>+ 11
qgo_SOURCES=board.cpp boardhandler.cpp  gamedialog.cpp \
	 gamestable.cpp gametree.cpp group.cpp  helpviewer.cpp \
	igsconnection.cpp imagehandler.cpp interfacehandler.cpp main.cpp maintable.cpp \
	mainwidget.cpp  mainwin.cpp mainwindow.cpp mark.cpp matrix.cpp \
	misc.cpp move.cpp msg_handler.cpp   \
	noderesults.cpp    parser.cpp \
	playertable.cpp preferences.cpp  qgo.cpp qgo_interface.cpp qgtp.cpp \
	qnewgamedlg.cpp   setting.cpp sgfparser.cpp \
	stone.cpp stonehandler.cpp tables.cpp  telnet.cpp  \
	textview.cpp  tip.cpp tree.cpp wavfile.c wavplay.c xmlparser.cpp \
	searchpath.cpp clientwindow_gui.cpp gameinfo_gui.cpp gui_dialog.cpp mainwidget_gui.cpp newgame_gui.cpp newlocalgame_gui.cpp noderesults_gui.cpp normaltools_gui.cpp nthmove_gui.cpp preferences_gui.cpp qnewgamedlg_gui.cpp scoretools_gui.cpp talk_gui.cpp textedit_gui.cpp textview_gui.cpp

SUBDIRS = pics translations sounds

qgo_LDFLAGS = $(all_libraries) $(USER_LDFLAGS)
qgo_LDADD = $(LIBSOCKET) $(LIB_QPE) $(LIB_QT)

METASOURCES = AUTO
noinst_HEADERS = board.h boardhandler.h config.h defines.h gamedialog.h \
	gamestable.h gametree.h globals.h group.h gs_globals.h helpviewer.h icons.h \
	igsconnection.h igsinterface.h imagehandler.h interfacehandler.h komispinbox.h \
	maintable.h mainwidget.h mainwindow.h mainwin.h mark.h matrix.h misc.h move.h \
	msg_handler.h noderesults.h parserdefs.h parser.h playertable.h preferences.h qgo.h \
	qgo_interface.h qgtp.h qnewgamedlg.h setting.h sgfparser.h stone.h stonehandler.h \
	tables.h telnet.h textview.h tip.h tree.h wavfile.h wavplay.h xmlparser.h

subdir = src
mkinstalldirs = $(SHELL) $(top_srcdir)/admin/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
bin_PROGRAMS = qgo$(EXEEXT)
PROGRAMS = $(bin_PROGRAMS)

am_qgo_OBJECTS = board.$(OBJEXT) boardhandler.$(OBJEXT) \
	gamedialog.$(OBJEXT) gamestable.$(OBJEXT) gametree.$(OBJEXT) \
	group.$(OBJEXT) helpviewer.$(OBJEXT) igsconnection.$(OBJEXT) \
	imagehandler.$(OBJEXT) interfacehandler.$(OBJEXT) \
	main.$(OBJEXT) maintable.$(OBJEXT) mainwidget.$(OBJEXT) \
	mainwin.$(OBJEXT) mainwindow.$(OBJEXT) mark.$(OBJEXT) \
	matrix.$(OBJEXT) misc.$(OBJEXT) move.$(OBJEXT) \
	msg_handler.$(OBJEXT) noderesults.$(OBJEXT) parser.$(OBJEXT) \
	playertable.$(OBJEXT) preferences.$(OBJEXT) qgo.$(OBJEXT) \
	qgo_interface.$(OBJEXT) qgtp.$(OBJEXT) qnewgamedlg.$(OBJEXT) \
	setting.$(OBJEXT) sgfparser.$(OBJEXT) stone.$(OBJEXT) \
	stonehandler.$(OBJEXT) tables.$(OBJEXT) telnet.$(OBJEXT) \
	textview.$(OBJEXT) tip.$(OBJEXT) tree.$(OBJEXT) \
	wavfile.$(OBJEXT) wavplay.$(OBJEXT) xmlparser.$(OBJEXT) \
	searchpath.$(OBJEXT)
#>- qgo_OBJECTS = $(am_qgo_OBJECTS)
#>+ 19
qgo_final_OBJECTS = wavfile.o wavplay.o qgo.all_cpp.o 
qgo_nofinal_OBJECTS = board.$(OBJEXT) boardhandler.$(OBJEXT) \
	gamedialog.$(OBJEXT) gamestable.$(OBJEXT) gametree.$(OBJEXT) \
	group.$(OBJEXT) helpviewer.$(OBJEXT) igsconnection.$(OBJEXT) \
	imagehandler.$(OBJEXT) interfacehandler.$(OBJEXT) \
	main.$(OBJEXT) maintable.$(OBJEXT) mainwidget.$(OBJEXT) \
	mainwin.$(OBJEXT) mainwindow.$(OBJEXT) mark.$(OBJEXT) \
	matrix.$(OBJEXT) misc.$(OBJEXT) move.$(OBJEXT) \
	msg_handler.$(OBJEXT) noderesults.$(OBJEXT) parser.$(OBJEXT) \
	playertable.$(OBJEXT) preferences.$(OBJEXT) qgo.$(OBJEXT) \
	qgo_interface.$(OBJEXT) qgtp.$(OBJEXT) qnewgamedlg.$(OBJEXT) \
	setting.$(OBJEXT) sgfparser.$(OBJEXT) stone.$(OBJEXT) \
	stonehandler.$(OBJEXT) tables.$(OBJEXT) telnet.$(OBJEXT) \
	textview.$(OBJEXT) tip.$(OBJEXT) tree.$(OBJEXT) \
	wavfile.$(OBJEXT) wavplay.$(OBJEXT) xmlparser.$(OBJEXT) \
	searchpath.$(OBJEXT) clientwindow_gui.$(OBJEXT) gameinfo_gui.$(OBJEXT) gui_dialog.$(OBJEXT) mainwidget_gui.$(OBJEXT) newgame_gui.$(OBJEXT) newlocalgame_gui.$(OBJEXT) noderesults_gui.$(OBJEXT) normaltools_gui.$(OBJEXT) nthmove_gui.$(OBJEXT) preferences_gui.$(OBJEXT) qnewgamedlg_gui.$(OBJEXT) scoretools_gui.$(OBJEXT) talk_gui.$(OBJEXT) textedit_gui.$(OBJEXT) textview_gui.$(OBJEXT)\
	noderesults.moc.o parser.moc.o mainwin.moc.o gamestable.moc.o qnewgamedlg.moc.o mainwidget.moc.o maintable.moc.o tip.moc.o tables.moc.o gametree.moc.o qgtp.moc.o helpviewer.moc.o gamedialog.moc.o igsconnection.moc.o board.moc.o mainwindow.moc.o qgo_interface.moc.o playertable.moc.o telnet.moc.o preferences.moc.o qgo.moc.o searchpath.moc.o textview.moc.o 
qgo_OBJECTS = $(qgo_nofinal_OBJECTS)
#qgo_OBJECTS = $(qgo_final_OBJECTS)
qgo_DEPENDENCIES =

DEFS = -DHAVE_CONFIG_H
DEFAULT_INCLUDES =  -I. -I$(srcdir) -I$(top_builddir)
CPPFLAGS =  -DQT_THREAD_SUPPORT -DDATADIR='"${datarootdir}"'  -D_REENTRANT
LDFLAGS = 
LIBS = 
depcomp = $(SHELL) $(top_srcdir)/admin/depcomp
am__depfiles_maybe = depfiles
DEP_FILES = ./$(DEPDIR)/board.Po ./$(DEPDIR)/boardhandler.Po \
		./$(DEPDIR)/gamedialog.Po ./$(DEPDIR)/gamestable.Po \
		./$(DEPDIR)/gametree.Po ./$(DEPDIR)/group.Po \
		./$(DEPDIR)/helpviewer.Po \
		./$(DEPDIR)/igsconnection.Po \
		./$(DEPDIR)/imagehandler.Po \
		./$(DEPDIR)/interfacehandler.Po ./$(DEPDIR)/main.Po \
		./$(DEPDIR)/maintable.Po ./$(DEPDIR)/mainwidget.Po \
		./$(DEPDIR)/mainwin.Po ./$(DEPDIR)/mainwindow.Po \
		./$(DEPDIR)/mark.Po ./$(DEPDIR)/matrix.Po \
		./$(DEPDIR)/misc.Po ./$(DEPDIR)/move.Po \
		./$(DEPDIR)/msg_handler.Po \
		./$(DEPDIR)/noderesults.Po ./$(DEPDIR)/parser.Po \
		./$(DEPDIR)/playertable.Po \
		./$(DEPDIR)/preferences.Po ./$(DEPDIR)/qgo.Po \
		./$(DEPDIR)/qgo_interface.Po ./$(DEPDIR)/qgtp.Po \
		./$(DEPDIR)/qnewgamedlg.Po \
		./$(DEPDIR)/searchpath.Po ./$(DEPDIR)/setting.Po \
		./$(DEPDIR)/sgfparser.Po ./$(DEPDIR)/stone.Po \
		./$(DEPDIR)/stonehandler.Po ./$(DEPDIR)/tables.Po \
		./$(DEPDIR)/telnet.Po ./$(DEPDIR)/textview.Po \
		./$(DEPDIR)/tip.Po ./$(DEPDIR)/tree.Po \
		./$(DEPDIR)/wavfile.Po ./$(DEPDIR)/wavplay.Po \
		./$(DEPDIR)/xmlparser.Po
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) \
	$(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
CFLAGS =  -g
#>- CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
#>- $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
#>+ 2
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS)
#>- LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(DEFS) \
#>- $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
#>- $(AM_CXXFLAGS) $(CXXFLAGS)
#>+ 3
LTCXXCOMPILE = $(LIBTOOL) --mode=compile --tag=CXX $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS)
CXXLD = $(CXX)
#>- CXXLINK = $(LIBTOOL) --mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \
#>- $(AM_LDFLAGS) $(LDFLAGS) -o $@
#>+ 2
CXXLINK = $(LIBTOOL) --mode=link --tag=CXX $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
CXXFLAGS =  -fno-exceptions -fno-check-new
DIST_SOURCES = $(qgo_SOURCES)
HEADERS = $(noinst_HEADERS)


RECURSIVE_TARGETS = info-recursive dvi-recursive install-info-recursive \
	uninstall-info-recursive all-recursive install-data-recursive \
	install-exec-recursive installdirs-recursive install-recursive \
	uninstall-recursive check-recursive installcheck-recursive
DIST_COMMON = $(noinst_HEADERS) Makefile.am Makefile.in
DIST_SUBDIRS = $(SUBDIRS)
SOURCES = $(qgo_SOURCES)

#>- all: all-recursive
#>+ 1
all: docs-am  all-recursive

.SUFFIXES:
.SUFFIXES: .c .cpp .lo .o .obj
$(srcdir)/Makefile.in:  Makefile.am  $(top_srcdir)/configure.in $(ACLOCAL_M4)
#>- 	cd $(top_srcdir) && \
#>- $(AUTOMAKE) --gnu  src/Makefile
#>+ 3
	cd $(top_srcdir) && \
	$(AUTOMAKE) --gnu  src/Makefile
	cd $(top_srcdir) && perl admin/am_edit src/Makefile.in
Makefile:  $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(bindir)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	if test -f $$p \
	|| test -f $$p1 \
	; then \
	f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(binPROGRAMS_INSTALL) $$p $(DESTDIR)$(bindir)/$$f"; \
	$(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(binPROGRAMS_INSTALL) $$p $(DESTDIR)$(bindir)/$$f; \
	else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	echo " rm -f $(DESTDIR)$(bindir)/$$f"; \
	rm -f $(DESTDIR)$(bindir)/$$f; \
	done

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f $$p $$f"; \
	rm -f $$p $$f ; \
	done
qgo$(EXEEXT): $(qgo_OBJECTS) $(qgo_DEPENDENCIES) 
	@rm -f qgo$(EXEEXT)
	$(CXXLINK) $(qgo_LDFLAGS) $(qgo_OBJECTS) $(qgo_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT) core *.core

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/board.Po
include ./$(DEPDIR)/boardhandler.Po
include ./$(DEPDIR)/gamedialog.Po
include ./$(DEPDIR)/gamestable.Po
include ./$(DEPDIR)/gametree.Po
include ./$(DEPDIR)/group.Po
include ./$(DEPDIR)/helpviewer.Po
include ./$(DEPDIR)/igsconnection.Po
include ./$(DEPDIR)/imagehandler.Po
include ./$(DEPDIR)/interfacehandler.Po
include ./$(DEPDIR)/main.Po
include ./$(DEPDIR)/maintable.Po
include ./$(DEPDIR)/mainwidget.Po
include ./$(DEPDIR)/mainwin.Po
include ./$(DEPDIR)/mainwindow.Po
include ./$(DEPDIR)/mark.Po
include ./$(DEPDIR)/matrix.Po
include ./$(DEPDIR)/misc.Po
include ./$(DEPDIR)/move.Po
include ./$(DEPDIR)/msg_handler.Po
include ./$(DEPDIR)/noderesults.Po
include ./$(DEPDIR)/parser.Po
include ./$(DEPDIR)/playertable.Po
include ./$(DEPDIR)/preferences.Po
include ./$(DEPDIR)/qgo.Po
include ./$(DEPDIR)/qgo_interface.Po
include ./$(DEPDIR)/qgtp.Po
include ./$(DEPDIR)/qnewgamedlg.Po
include ./$(DEPDIR)/searchpath.Po
include ./$(DEPDIR)/setting.Po
include ./$(DEPDIR)/sgfparser.Po
include ./$(DEPDIR)/stone.Po
include ./$(DEPDIR)/stonehandler.Po
include ./$(DEPDIR)/tables.Po
include ./$(DEPDIR)/telnet.Po
include ./$(DEPDIR)/textview.Po
include ./$(DEPDIR)/tip.Po
include ./$(DEPDIR)/tree.Po
include ./$(DEPDIR)/wavfile.Po
include ./$(DEPDIR)/wavplay.Po
include ./$(DEPDIR)/xmlparser.Po

distclean-depend:
	-rm -rf ./$(DEPDIR)

.c.o:
	source='$<' object='$@' libtool=no \
	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
	$(CCDEPMODE) $(depcomp) \
	$(COMPILE) -c `test -f '$<' || echo '$(srcdir)/'`$<

.c.obj:
	source='$<' object='$@' libtool=no \
	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
	$(CCDEPMODE) $(depcomp) \
	$(COMPILE) -c `cygpath -w $<`

.c.lo:
	source='$<' object='$@' libtool=yes \
	depfile='$(DEPDIR)/$*.Plo' tmpdepfile='$(DEPDIR)/$*.TPlo' \
	$(CCDEPMODE) $(depcomp) \
	$(LTCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<
CCDEPMODE = depmode=gcc3

.cpp.o:
	source='$<' object='$@' libtool=no \
	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
	$(CXXDEPMODE) $(depcomp) \
	$(CXXCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

.cpp.obj:
	source='$<' object='$@' libtool=no \
	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
	$(CXXDEPMODE) $(depcomp) \
	$(CXXCOMPILE) -c -o $@ `cygpath -w $<`

.cpp.lo:
	source='$<' object='$@' libtool=yes \
	depfile='$(DEPDIR)/$*.Plo' tmpdepfile='$(DEPDIR)/$*.TPlo' \
	$(CXXDEPMODE) $(depcomp) \
	$(LTCXXCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<
CXXDEPMODE = depmode=gcc3

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:

# This directory's subdirectories are mostly independent; you can cd
# into them and run `make' without going through this Makefile.
# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.
$(RECURSIVE_TARGETS):
	@set fnord $$MAKEFLAGS; amf=$$2; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	echo "Making $$target in $$subdir"; \
	if test "$$subdir" = "."; then \
	dot_seen=yes; \
	local_target="$$target-am"; \
	else \
	local_target="$$target"; \
	fi; \
	(cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	|| case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; \
	done; \
	if test "$$dot_seen" = "no"; then \
	$(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

mostlyclean-recursive clean-recursive distclean-recursive \
	maintainer-clean-recursive:
	@set fnord $$MAKEFLAGS; amf=$$2; \
	dot_seen=no; \
	case "$@" in \
	distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	*) list='$(SUBDIRS)' ;; \
	esac; \
	rev=''; for subdir in $$list; do \
	if test "$$subdir" = "."; then :; else \
	rev="$$subdir $$rev"; \
	fi; \
	done; \
	rev="$$rev ."; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	echo "Making $$target in $$subdir"; \
	if test "$$subdir" = "."; then \
	local_target="$$target-am"; \
	else \
	local_target="$$target"; \
	fi; \
	(cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	|| case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; \
	done && test -z "$$fail"
tags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) tags); \
	done

ETAGS = etags
ETAGSFLAGS =

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	done | \
	$(AWK) '    { files[$$0] = 1; } \
	END { for (i in files) print i; }'`; \
	mkid -fID $$unique

TAGS: tags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
	$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	if test "$$subdir" = .; then :; else \
	test -f $$subdir/TAGS && tags="$$tags -i $$here/$$subdir/TAGS"; \
	fi; \
	done; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	done | \
	$(AWK) '    { files[$$0] = 1; } \
	END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$tags$$unique" \
	|| $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	$$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	&& cd $(top_srcdir) \
	&& gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH
#>- DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
#>+ 4
KDE_DIST=qgo_fr.ts mainwidget_gui qgo_empty.ts qgo_zh.ts qgo_tr.ts qgo_pt.ts qgo.pro.bak clientwindow_gui.bak.ui Info.plist searchpath.cpp qgo_cz.ts qgo_nl.ts qgo.ts.zip searchpath.h qgo_es.ts qgo_la.ts qgo-computerdlg1.diff Makefile.OSX qgo_it.ts qGo board descriptions.cw preferences_gui2.ui Makefile.am.bak qgo_ru.ts qgo_dk.ts qgo_de.ts 

DISTFILES= $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST) $(KDE_DIST)


top_distdir = ..
distdir = $(top_distdir)/$(PACKAGE)-$(VERSION)

distdir: $(DISTFILES)
	@list='$(DISTFILES)'; for file in $$list; do \
	if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	dir="/$$dir"; \
	$(mkinstalldirs) "$(distdir)$$dir"; \
	else \
	dir=''; \
	fi; \
	if test -d $$d/$$file; then \
	if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	fi; \
	cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	else \
	test -f $(distdir)/$$file \
	|| cp -p $$d/$$file $(distdir)/$$file \
	|| exit 1; \
	fi; \
	done
	list='$(SUBDIRS)'; for subdir in $$list; do \
	if test "$$subdir" = .; then :; else \
	test -d $(distdir)/$$subdir \
	|| mkdir $(distdir)/$$subdir \
	|| exit 1; \
	(cd $$subdir && \
	$(MAKE) $(AM_MAKEFLAGS) \
	top_distdir="$(top_distdir)" \
	distdir=../$(distdir)/$$subdir \
	distdir) \
	|| exit 1; \
	fi; \
	done
check-am: all-am
check: check-recursive
all-am: Makefile $(PROGRAMS) $(HEADERS)
installdirs: installdirs-recursive
installdirs-am:
	$(mkinstalldirs) $(DESTDIR)$(bindir)

install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	INSTALL_STRIP_FLAG=-s \
	`test -z '$(STRIP)' || \
	echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
#>- clean: clean-recursive
#>+ 1
clean: kde-rpo-clean  clean-recursive

#>- clean-am: clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am
#>+ 1
clean-am: clean-metasources clean-ui clean-final  clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am

distclean: distclean-recursive

distclean-am: clean-am distclean-compile distclean-depend \
	distclean-generic distclean-libtool distclean-tags

dvi: dvi-recursive

dvi-am:

info: info-recursive

info-am:

install-data-am:

install-exec-am: install-binPROGRAMS

install-info: install-info-recursive

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-recursive

maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

uninstall-am: uninstall-binPROGRAMS uninstall-info-am

uninstall-info: uninstall-info-recursive

.PHONY: $(RECURSIVE_TARGETS) GTAGS all all-am check check-am clean \
	clean-binPROGRAMS clean-generic clean-libtool clean-recursive \
	distclean distclean-compile distclean-depend distclean-generic \
	distclean-libtool distclean-recursive distclean-tags distdir \
	dvi dvi-am dvi-recursive info info-am info-recursive install \
	install-am install-binPROGRAMS install-data install-data-am \
	install-data-recursive install-exec install-exec-am \
	install-exec-recursive install-info install-info-am \
	install-info-recursive install-man install-recursive \
	install-strip installcheck installcheck-am installdirs \
	installdirs-am installdirs-recursive maintainer-clean \
	maintainer-clean-generic maintainer-clean-recursive mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	mostlyclean-recursive tags tags-recursive uninstall \
	uninstall-am uninstall-binPROGRAMS uninstall-info-am \
	uninstall-info-recursive uninstall-recursive

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:

#>+ 151
clientwindow_gui.cpp: $(srcdir)/clientwindow_gui.ui clientwindow_gui.h clientwindow_gui.moc
	rm -f clientwindow_gui.cpp
	$(UIC) -i clientwindow_gui.h $(srcdir)/clientwindow_gui.ui > clientwindow_gui.cpp || rm -f clientwindow_gui.cpp
	echo '#include "clientwindow_gui.moc"' >> clientwindow_gui.cpp

clientwindow_gui.h: $(srcdir)/clientwindow_gui.ui
	$(UIC) -o clientwindow_gui.h $(srcdir)/clientwindow_gui.ui

clientwindow_gui.moc: clientwindow_gui.h
	$(MOC) clientwindow_gui.h -o clientwindow_gui.moc
gameinfo_gui.cpp: $(srcdir)/gameinfo_gui.ui gameinfo_gui.h gameinfo_gui.moc
	rm -f gameinfo_gui.cpp
	$(UIC) -i gameinfo_gui.h $(srcdir)/gameinfo_gui.ui > gameinfo_gui.cpp || rm -f gameinfo_gui.cpp
	echo '#include "gameinfo_gui.moc"' >> gameinfo_gui.cpp

gameinfo_gui.h: $(srcdir)/gameinfo_gui.ui
	$(UIC) -o gameinfo_gui.h $(srcdir)/gameinfo_gui.ui

gameinfo_gui.moc: gameinfo_gui.h
	$(MOC) gameinfo_gui.h -o gameinfo_gui.moc
gui_dialog.cpp: $(srcdir)/gui_dialog.ui gui_dialog.h gui_dialog.moc
	rm -f gui_dialog.cpp
	$(UIC) -i gui_dialog.h $(srcdir)/gui_dialog.ui > gui_dialog.cpp || rm -f gui_dialog.cpp
	echo '#include "gui_dialog.moc"' >> gui_dialog.cpp

gui_dialog.h: $(srcdir)/gui_dialog.ui
	$(UIC) -o gui_dialog.h $(srcdir)/gui_dialog.ui

gui_dialog.moc: gui_dialog.h
	$(MOC) gui_dialog.h -o gui_dialog.moc
mainwidget_gui.cpp: $(srcdir)/mainwidget_gui.ui mainwidget_gui.h mainwidget_gui.moc
	rm -f mainwidget_gui.cpp
	$(UIC) -i mainwidget_gui.h $(srcdir)/mainwidget_gui.ui > mainwidget_gui.cpp || rm -f mainwidget_gui.cpp
	echo '#include "mainwidget_gui.moc"' >> mainwidget_gui.cpp

mainwidget_gui.h: $(srcdir)/mainwidget_gui.ui
	$(UIC) -o mainwidget_gui.h $(srcdir)/mainwidget_gui.ui

mainwidget_gui.moc: mainwidget_gui.h
	$(MOC) mainwidget_gui.h -o mainwidget_gui.moc
newgame_gui.cpp: $(srcdir)/newgame_gui.ui newgame_gui.h newgame_gui.moc
	rm -f newgame_gui.cpp
	$(UIC) -i newgame_gui.h $(srcdir)/newgame_gui.ui > newgame_gui.cpp || rm -f newgame_gui.cpp
	echo '#include "newgame_gui.moc"' >> newgame_gui.cpp

newgame_gui.h: $(srcdir)/newgame_gui.ui
	$(UIC) -o newgame_gui.h $(srcdir)/newgame_gui.ui

newgame_gui.moc: newgame_gui.h
	$(MOC) newgame_gui.h -o newgame_gui.moc
newlocalgame_gui.cpp: $(srcdir)/newlocalgame_gui.ui newlocalgame_gui.h newlocalgame_gui.moc
	rm -f newlocalgame_gui.cpp
	$(UIC) -i newlocalgame_gui.h $(srcdir)/newlocalgame_gui.ui > newlocalgame_gui.cpp || rm -f newlocalgame_gui.cpp
	echo '#include "newlocalgame_gui.moc"' >> newlocalgame_gui.cpp

newlocalgame_gui.h: $(srcdir)/newlocalgame_gui.ui
	$(UIC) -o newlocalgame_gui.h $(srcdir)/newlocalgame_gui.ui

newlocalgame_gui.moc: newlocalgame_gui.h
	$(MOC) newlocalgame_gui.h -o newlocalgame_gui.moc
noderesults_gui.cpp: $(srcdir)/noderesults_gui.ui noderesults_gui.h noderesults_gui.moc
	rm -f noderesults_gui.cpp
	$(UIC) -i noderesults_gui.h $(srcdir)/noderesults_gui.ui > noderesults_gui.cpp || rm -f noderesults_gui.cpp
	echo '#include "noderesults_gui.moc"' >> noderesults_gui.cpp

noderesults_gui.h: $(srcdir)/noderesults_gui.ui
	$(UIC) -o noderesults_gui.h $(srcdir)/noderesults_gui.ui

noderesults_gui.moc: noderesults_gui.h
	$(MOC) noderesults_gui.h -o noderesults_gui.moc
normaltools_gui.cpp: $(srcdir)/normaltools_gui.ui normaltools_gui.h normaltools_gui.moc
	rm -f normaltools_gui.cpp
	$(UIC) -i normaltools_gui.h $(srcdir)/normaltools_gui.ui > normaltools_gui.cpp || rm -f normaltools_gui.cpp
	echo '#include "normaltools_gui.moc"' >> normaltools_gui.cpp

normaltools_gui.h: $(srcdir)/normaltools_gui.ui
	$(UIC) -o normaltools_gui.h $(srcdir)/normaltools_gui.ui

normaltools_gui.moc: normaltools_gui.h
	$(MOC) normaltools_gui.h -o normaltools_gui.moc
nthmove_gui.cpp: $(srcdir)/nthmove_gui.ui nthmove_gui.h nthmove_gui.moc
	rm -f nthmove_gui.cpp
	$(UIC) -i nthmove_gui.h $(srcdir)/nthmove_gui.ui > nthmove_gui.cpp || rm -f nthmove_gui.cpp
	echo '#include "nthmove_gui.moc"' >> nthmove_gui.cpp

nthmove_gui.h: $(srcdir)/nthmove_gui.ui
	$(UIC) -o nthmove_gui.h $(srcdir)/nthmove_gui.ui

nthmove_gui.moc: nthmove_gui.h
	$(MOC) nthmove_gui.h -o nthmove_gui.moc
preferences_gui.cpp: $(srcdir)/preferences_gui.ui preferences_gui.h preferences_gui.moc
	rm -f preferences_gui.cpp
	$(UIC) -i preferences_gui.h $(srcdir)/preferences_gui.ui > preferences_gui.cpp || rm -f preferences_gui.cpp
	echo '#include "preferences_gui.moc"' >> preferences_gui.cpp

preferences_gui.h: $(srcdir)/preferences_gui.ui
	$(UIC) -o preferences_gui.h $(srcdir)/preferences_gui.ui

preferences_gui.moc: preferences_gui.h
	$(MOC) preferences_gui.h -o preferences_gui.moc
qnewgamedlg_gui.cpp: $(srcdir)/qnewgamedlg_gui.ui qnewgamedlg_gui.h qnewgamedlg_gui.moc
	rm -f qnewgamedlg_gui.cpp
	$(UIC) -i qnewgamedlg_gui.h $(srcdir)/qnewgamedlg_gui.ui > qnewgamedlg_gui.cpp || rm -f qnewgamedlg_gui.cpp
	echo '#include "qnewgamedlg_gui.moc"' >> qnewgamedlg_gui.cpp

qnewgamedlg_gui.h: $(srcdir)/qnewgamedlg_gui.ui
	$(UIC) -o qnewgamedlg_gui.h $(srcdir)/qnewgamedlg_gui.ui

qnewgamedlg_gui.moc: qnewgamedlg_gui.h
	$(MOC) qnewgamedlg_gui.h -o qnewgamedlg_gui.moc
scoretools_gui.cpp: $(srcdir)/scoretools_gui.ui scoretools_gui.h scoretools_gui.moc
	rm -f scoretools_gui.cpp
	$(UIC) -i scoretools_gui.h $(srcdir)/scoretools_gui.ui > scoretools_gui.cpp || rm -f scoretools_gui.cpp
	echo '#include "scoretools_gui.moc"' >> scoretools_gui.cpp

scoretools_gui.h: $(srcdir)/scoretools_gui.ui
	$(UIC) -o scoretools_gui.h $(srcdir)/scoretools_gui.ui

scoretools_gui.moc: scoretools_gui.h
	$(MOC) scoretools_gui.h -o scoretools_gui.moc
talk_gui.cpp: $(srcdir)/talk_gui.ui talk_gui.h talk_gui.moc
	rm -f talk_gui.cpp
	$(UIC) -i talk_gui.h $(srcdir)/talk_gui.ui > talk_gui.cpp || rm -f talk_gui.cpp
	echo '#include "talk_gui.moc"' >> talk_gui.cpp

talk_gui.h: $(srcdir)/talk_gui.ui
	$(UIC) -o talk_gui.h $(srcdir)/talk_gui.ui

talk_gui.moc: talk_gui.h
	$(MOC) talk_gui.h -o talk_gui.moc
textedit_gui.cpp: $(srcdir)/textedit_gui.ui textedit_gui.h textedit_gui.moc
	rm -f textedit_gui.cpp
	$(UIC) -i textedit_gui.h $(srcdir)/textedit_gui.ui > textedit_gui.cpp || rm -f textedit_gui.cpp
	echo '#include "textedit_gui.moc"' >> textedit_gui.cpp

textedit_gui.h: $(srcdir)/textedit_gui.ui
	$(UIC) -o textedit_gui.h $(srcdir)/textedit_gui.ui

textedit_gui.moc: textedit_gui.h
	$(MOC) textedit_gui.h -o textedit_gui.moc
textview_gui.cpp: $(srcdir)/textview_gui.ui textview_gui.h textview_gui.moc
	rm -f textview_gui.cpp
	$(UIC) -i textview_gui.h $(srcdir)/textview_gui.ui > textview_gui.cpp || rm -f textview_gui.cpp
	echo '#include "textview_gui.moc"' >> textview_gui.cpp

textview_gui.h: $(srcdir)/textview_gui.ui
	$(UIC) -o textview_gui.h $(srcdir)/textview_gui.ui

textview_gui.moc: textview_gui.h
	$(MOC) textview_gui.h -o textview_gui.moc

#>+ 3
noderesults.moc.cpp: $(srcdir)/noderesults.h
	$(MOC) $(srcdir)/noderesults.h -o noderesults.moc.cpp

#>+ 3
parser.moc.cpp: $(srcdir)/parser.h
	$(MOC) $(srcdir)/parser.h -o parser.moc.cpp

#>+ 3
mainwin.moc.cpp: $(srcdir)/mainwin.h
	$(MOC) $(srcdir)/mainwin.h -o mainwin.moc.cpp

#>+ 3
gamestable.moc.cpp: $(srcdir)/gamestable.h
	$(MOC) $(srcdir)/gamestable.h -o gamestable.moc.cpp

#>+ 3
qnewgamedlg.moc.cpp: $(srcdir)/qnewgamedlg.h
	$(MOC) $(srcdir)/qnewgamedlg.h -o qnewgamedlg.moc.cpp

#>+ 3
mainwidget.moc.cpp: $(srcdir)/mainwidget.h
	$(MOC) $(srcdir)/mainwidget.h -o mainwidget.moc.cpp

#>+ 3
maintable.moc.cpp: $(srcdir)/maintable.h
	$(MOC) $(srcdir)/maintable.h -o maintable.moc.cpp

#>+ 3
tip.moc.cpp: $(srcdir)/tip.h
	$(MOC) $(srcdir)/tip.h -o tip.moc.cpp

#>+ 3
tables.moc.cpp: $(srcdir)/tables.h
	$(MOC) $(srcdir)/tables.h -o tables.moc.cpp

#>+ 3
gametree.moc.cpp: $(srcdir)/gametree.h
	$(MOC) $(srcdir)/gametree.h -o gametree.moc.cpp

#>+ 3
qgtp.moc.cpp: $(srcdir)/qgtp.h
	$(MOC) $(srcdir)/qgtp.h -o qgtp.moc.cpp

#>+ 3
helpviewer.moc.cpp: $(srcdir)/helpviewer.h
	$(MOC) $(srcdir)/helpviewer.h -o helpviewer.moc.cpp

#>+ 3
gamedialog.moc.cpp: $(srcdir)/gamedialog.h
	$(MOC) $(srcdir)/gamedialog.h -o gamedialog.moc.cpp

#>+ 3
igsconnection.moc.cpp: $(srcdir)/igsconnection.h
	$(MOC) $(srcdir)/igsconnection.h -o igsconnection.moc.cpp

#>+ 3
board.moc.cpp: $(srcdir)/board.h
	$(MOC) $(srcdir)/board.h -o board.moc.cpp

#>+ 3
mainwindow.moc.cpp: $(srcdir)/mainwindow.h
	$(MOC) $(srcdir)/mainwindow.h -o mainwindow.moc.cpp

#>+ 3
qgo_interface.moc.cpp: $(srcdir)/qgo_interface.h
	$(MOC) $(srcdir)/qgo_interface.h -o qgo_interface.moc.cpp

#>+ 3
playertable.moc.cpp: $(srcdir)/playertable.h
	$(MOC) $(srcdir)/playertable.h -o playertable.moc.cpp

#>+ 3
telnet.moc.cpp: $(srcdir)/telnet.h
	$(MOC) $(srcdir)/telnet.h -o telnet.moc.cpp

#>+ 3
preferences.moc.cpp: $(srcdir)/preferences.h
	$(MOC) $(srcdir)/preferences.h -o preferences.moc.cpp

#>+ 3
qgo.moc.cpp: $(srcdir)/qgo.h
	$(MOC) $(srcdir)/qgo.h -o qgo.moc.cpp

#>+ 3
searchpath.moc.cpp: $(srcdir)/searchpath.h
	$(MOC) $(srcdir)/searchpath.h -o searchpath.moc.cpp

#>+ 3
textview.moc.cpp: $(srcdir)/textview.h
	$(MOC) $(srcdir)/textview.h -o textview.moc.cpp

#>+ 3
clean-metasources:
	-rm -f  noderesults.moc.cpp parser.moc.cpp mainwin.moc.cpp gamestable.moc.cpp qnewgamedlg.moc.cpp mainwidget.moc.cpp maintable.moc.cpp tip.moc.cpp tables.moc.cpp gametree.moc.cpp qgtp.moc.cpp helpviewer.moc.cpp gamedialog.moc.cpp igsconnection.moc.cpp board.moc.cpp mainwindow.moc.cpp qgo_interface.moc.cpp playertable.moc.cpp telnet.moc.cpp preferences.moc.cpp qgo.moc.cpp searchpath.moc.cpp textview.moc.cpp

#>+ 18
clean-ui:
	-rm -f \
	clientwindow_gui.cpp clientwindow_gui.h clientwindow_gui.moc \
	gameinfo_gui.cpp gameinfo_gui.h gameinfo_gui.moc \
	gui_dialog.cpp gui_dialog.h gui_dialog.moc \
	mainwidget_gui.cpp mainwidget_gui.h mainwidget_gui.moc \
	newgame_gui.cpp newgame_gui.h newgame_gui.moc \
	newlocalgame_gui.cpp newlocalgame_gui.h newlocalgame_gui.moc \
	noderesults_gui.cpp noderesults_gui.h noderesults_gui.moc \
	normaltools_gui.cpp normaltools_gui.h normaltools_gui.moc \
	nthmove_gui.cpp nthmove_gui.h nthmove_gui.moc \
	preferences_gui.cpp preferences_gui.h preferences_gui.moc \
	qnewgamedlg_gui.cpp qnewgamedlg_gui.h qnewgamedlg_gui.moc \
	scoretools_gui.cpp scoretools_gui.h scoretools_gui.moc \
	talk_gui.cpp talk_gui.h talk_gui.moc \
	textedit_gui.cpp textedit_gui.h textedit_gui.moc \
	textview_gui.cpp textview_gui.h textview_gui.moc 

#>+ 2
docs-am:

#>+ 6
force-reedit:
		cd $(top_srcdir) && \
	$(AUTOMAKE) --gnu  src/Makefile
	cd $(top_srcdir) && perl admin/am_edit src/Makefile.in


#>+ 11
qgo.all_cpp.cpp: $(srcdir)/Makefile.in $(srcdir)/board.cpp $(srcdir)/boardhandler.cpp $(srcdir)/gamedialog.cpp $(srcdir)/gamestable.cpp $(srcdir)/gametree.cpp $(srcdir)/group.cpp $(srcdir)/helpviewer.cpp $(srcdir)/igsconnection.cpp $(srcdir)/imagehandler.cpp $(srcdir)/interfacehandler.cpp $(srcdir)/main.cpp $(srcdir)/maintable.cpp $(srcdir)/mainwidget.cpp $(srcdir)/mainwin.cpp $(srcdir)/mainwindow.cpp $(srcdir)/mark.cpp $(srcdir)/matrix.cpp $(srcdir)/misc.cpp $(srcdir)/move.cpp $(srcdir)/msg_handler.cpp $(srcdir)/noderesults.cpp $(srcdir)/parser.cpp $(srcdir)/playertable.cpp $(srcdir)/preferences.cpp $(srcdir)/qgo.cpp $(srcdir)/qgo_interface.cpp $(srcdir)/qgtp.cpp $(srcdir)/qnewgamedlg.cpp $(srcdir)/setting.cpp $(srcdir)/sgfparser.cpp $(srcdir)/stone.cpp $(srcdir)/stonehandler.cpp $(srcdir)/tables.cpp $(srcdir)/telnet.cpp $(srcdir)/textview.cpp $(srcdir)/tip.cpp $(srcdir)/tree.cpp $(srcdir)/xmlparser.cpp $(srcdir)/searchpath.cpp clientwindow_gui.cpp gameinfo_gui.cpp gui_dialog.cpp mainwidget_gui.cpp newgame_gui.cpp newlocalgame_gui.cpp noderesults_gui.cpp normaltools_gui.cpp nthmove_gui.cpp preferences_gui.cpp qnewgamedlg_gui.cpp scoretools_gui.cpp talk_gui.cpp textedit_gui.cpp textview_gui.cpp  noderesults.moc.cpp parser.moc.cpp mainwin.moc.cpp gamestable.moc.cpp qnewgamedlg.moc.cpp mainwidget.moc.cpp maintable.moc.cpp tip.moc.cpp tables.moc.cpp gametree.moc.cpp qgtp.moc.cpp helpviewer.moc.cpp gamedialog.moc.cpp igsconnection.moc.cpp board.moc.cpp mainwindow.moc.cpp qgo_interface.moc.cpp playertable.moc.cpp telnet.moc.cpp preferences.moc.cpp qgo.moc.cpp searchpath.moc.cpp textview.moc.cpp
	@echo 'creating qgo.all_cpp.cpp ...'; \
	rm -f qgo.all_cpp.files qgo.all_cpp.final; \
	echo "#define KDE_USE_FINAL 1" >> qgo.all_cpp.final; \
	for file in board.cpp boardhandler.cpp gamedialog.cpp gamestable.cpp gametree.cpp group.cpp helpviewer.cpp igsconnection.cpp imagehandler.cpp interfacehandler.cpp main.cpp maintable.cpp mainwidget.cpp mainwin.cpp mainwindow.cpp mark.cpp matrix.cpp misc.cpp move.cpp msg_handler.cpp noderesults.cpp parser.cpp playertable.cpp preferences.cpp qgo.cpp qgo_interface.cpp qgtp.cpp qnewgamedlg.cpp setting.cpp sgfparser.cpp stone.cpp stonehandler.cpp tables.cpp telnet.cpp textview.cpp tip.cpp tree.cpp xmlparser.cpp searchpath.cpp clientwindow_gui.cpp gameinfo_gui.cpp gui_dialog.cpp mainwidget_gui.cpp newgame_gui.cpp newlocalgame_gui.cpp noderesults_gui.cpp normaltools_gui.cpp nthmove_gui.cpp preferences_gui.cpp qnewgamedlg_gui.cpp scoretools_gui.cpp talk_gui.cpp textedit_gui.cpp textview_gui.cpp  noderesults.moc.cpp parser.moc.cpp mainwin.moc.cpp gamestable.moc.cpp qnewgamedlg.moc.cpp mainwidget.moc.cpp maintable.moc.cpp tip.moc.cpp tables.moc.cpp gametree.moc.cpp qgtp.moc.cpp helpviewer.moc.cpp gamedialog.moc.cpp igsconnection.moc.cpp board.moc.cpp mainwindow.moc.cpp qgo_interface.moc.cpp playertable.moc.cpp telnet.moc.cpp preferences.moc.cpp qgo.moc.cpp searchpath.moc.cpp textview.moc.cpp; do \
	  echo "#include \"$$file\"" >> qgo.all_cpp.files; \
	  test ! -f $(srcdir)/$$file || egrep '^#pragma +implementation' $(srcdir)/$$file >> qgo.all_cpp.final; \
	done; \
	cat qgo.all_cpp.final qgo.all_cpp.files  > qgo.all_cpp.cpp; \
	rm -f qgo.all_cpp.final qgo.all_cpp.files

#>+ 3
clean-final:
	-rm -f qgo.all_cpp.cpp

#>+ 2
final:
	$(MAKE) qgo_OBJECTS="$(qgo_final_OBJECTS)" all-am
#>+ 2
final-install:
	$(MAKE) qgo_OBJECTS="$(qgo_final_OBJECTS)" install-am
#>+ 2
no-final:
	$(MAKE) qgo_OBJECTS="$(qgo_nofinal_OBJECTS)" all-am
#>+ 2
no-final-install:
	$(MAKE) qgo_OBJECTS="$(qgo_nofinal_OBJECTS)" install-am
#>+ 3
cvs-clean:
	$(MAKE) -f $(top_srcdir)/admin/Makefile.common cvs-clean

#>+ 3
kde-rpo-clean:
	-rm -f *.rpo

#>+ 42
$(srcdir)/mainwidget.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/stone.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/mark.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/group.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/noderesults.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/main.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/textview.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/sgfparser.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/mainwin.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/move.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/xmlparser.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/mainwindow.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/qgo.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/tip.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/qgo_interface.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/stonehandler.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/parser.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/tables.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/telnet.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/playertable.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/preferences.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/msg_handler.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/setting.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/board.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/helpviewer.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/searchpath.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/misc.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/imagehandler.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/interfacehandler.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/igsconnection.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/matrix.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/gamedialog.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/gamestable.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/boardhandler.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/maintable.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/qgtp.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/qnewgamedlg.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/wavfile.c: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/wavplay.c: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/tree.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
$(srcdir)/gametree.cpp: clientwindow_gui.h gameinfo_gui.h gui_dialog.h mainwidget_gui.h newgame_gui.h newlocalgame_gui.h noderesults_gui.h normaltools_gui.h nthmove_gui.h preferences_gui.h qnewgamedlg_gui.h scoretools_gui.h talk_gui.h textedit_gui.h textview_gui.h 
