/****************************************************************************
** Form implementation generated from reading ui file './clientwindow_gui.ui'
**
** Created by User Interface Compiler
**
** WARNING! All changes made in this file will be lost!
****************************************************************************/

#include "clientwindow_gui.h"

#include <qvariant.h>
#include <gamestable.h>
#include <playertable.h>
#include <qpushbutton.h>
#include <qsplitter.h>
#include <qgroupbox.h>
#include <qcombobox.h>
#include <qcheckbox.h>
#include <qtabwidget.h>
#include <qwidget.h>
#include <qlistbox.h>
#include <qtextbrowser.h>
#include <qtoolbutton.h>
#include <qlayout.h>
#include <qtooltip.h>
#include <qwhatsthis.h>
#include <qaction.h>
#include <qmenubar.h>
#include <qpopupmenu.h>
#include <qtoolbar.h>
#include <qimage.h>
#include <qpixmap.h>

#include "playertable.h"
#include "gamestable.h"
static const unsigned char image0_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x73, 0x7a, 0x7a, 0xf4, 0x00, 0x00, 0x06,
    0xb5, 0x49, 0x44, 0x41, 0x54, 0x58, 0x85, 0xc5, 0x96, 0x69, 0x8c, 0x5d,
    0x65, 0x19, 0xc7, 0x7f, 0xef, 0x59, 0xee, 0xb9, 0xe7, 0x9c, 0x7b, 0xe7,
    0xce, 0xda, 0xe9, 0xcc, 0xb4, 0x9d, 0x69, 0x67, 0x5a, 0xba, 0xd8, 0xda,
    0x4c, 0xa9, 0x3b, 0x6d, 0x20, 0x08, 0x12, 0x6a, 0x52, 0x88, 0x41, 0x8d,
    0xa8, 0xa8, 0x34, 0x62, 0xf8, 0xa0, 0x95, 0x26, 0x4a, 0x22, 0x02, 0x7e,
    0x28, 0x69, 0x8c, 0x1a, 0x17, 0x9a, 0xb8, 0xb4, 0x36, 0x88, 0x80, 0x91,
    0xa4, 0xc1, 0x88, 0x31, 0x6a, 0x48, 0xac, 0x71, 0x42, 0x9d, 0x42, 0x29,
    0xa5, 0x03, 0x1d, 0xba, 0xcc, 0x4c, 0xcb, 0xbd, 0xb3, 0xde, 0xfd, 0xde,
    0xb3, 0x9f, 0xd7, 0x0f, 0x84, 0x21, 0xb5, 0x4b, 0xe6, 0x4e, 0x9a, 0xf8,
    0xff, 0xfa, 0xbe, 0x79, 0xf2, 0x7b, 0x9f, 0xff, 0xb3, 0xbc, 0x62, 0x68,
    0x68, 0x88, 0xff, 0xa7, 0x94, 0x46, 0x2e, 0x37, 0x57, 0x27, 0x65, 0xee,
    0xa5, 0xe7, 0x65, 0x62, 0xea, 0xb4, 0xbc, 0x5e, 0x00, 0xda, 0xb5, 0x0e,
    0xa7, 0x0e, 0xec, 0x95, 0xa6, 0xe1, 0x63, 0x76, 0xf6, 0xe2, 0xf9, 0x15,
    0xa6, 0x4b, 0x05, 0x82, 0x38, 0x66, 0xfc, 0xc2, 0x09, 0x22, 0x91, 0x96,
    0x46, 0xa6, 0x85, 0xb9, 0xe9, 0x0b, 0xac, 0xdd, 0xf5, 0x03, 0xb1, 0x58,
    0x00, 0x71, 0x25, 0x0b, 0xce, 0x3f, 0xf9, 0x3d, 0xd9, 0x35, 0xb0, 0x8c,
    0x5a, 0xad, 0x42, 0xe8, 0xf9, 0x38, 0x9e, 0x4b, 0xb1, 0x58, 0xc4, 0xa9,
    0x47, 0x58, 0xba, 0x41, 0xc2, 0x4c, 0x12, 0xfb, 0x0e, 0xba, 0x95, 0x04,
    0x25, 0x41, 0x64, 0x2e, 0x45, 0x8f, 0x67, 0x18, 0xf8, 0xf2, 0xa3, 0x0d,
    0x83, 0x5c, 0x06, 0x30, 0xf9, 0xd4, 0x3e, 0x19, 0x25, 0x20, 0x74, 0xea,
    0x94, 0x67, 0x2b, 0x94, 0x7c, 0xc1, 0x37, 0x7e, 0xf9, 0x0c, 0x00, 0xf1,
    0x92, 0xa5, 0xfc, 0xe6, 0x81, 0xfb, 0xb9, 0xff, 0xdb, 0xbb, 0x29, 0xa9,
    0x19, 0x7e, 0xfa, 0xe0, 0x7d, 0xf4, 0xa4, 0x15, 0x24, 0x11, 0x4e, 0x2d,
    0x66, 0xa0, 0xd5, 0x65, 0xc5, 0xb7, 0xf6, 0x37, 0x04, 0x71, 0x09, 0xc0,
    0x91, 0x47, 0x77, 0xc9, 0xd5, 0x6b, 0xd7, 0x50, 0x2b, 0xce, 0x80, 0x1f,
    0x33, 0x1b, 0xb6, 0xf1, 0xf5, 0x67, 0xfe, 0x88, 0x95, 0x30, 0x80, 0x18,
    0x64, 0x44, 0x14, 0x2b, 0xa8, 0xaa, 0x8a, 0x04, 0x46, 0x86, 0x8f, 0x92,
    0xd0, 0x75, 0x32, 0x09, 0xc9, 0x5b, 0xaf, 0x1e, 0x67, 0xf6, 0xc5, 0x43,
    0xf8, 0x6d, 0xed, 0xf4, 0x7e, 0xe1, 0x3b, 0x0b, 0x86, 0x98, 0x2f, 0xc2,
    0xa7, 0x9f, 0x78, 0x58, 0xea, 0x61, 0x82, 0x99, 0x0b, 0x59, 0xce, 0x16,
    0x13, 0xdc, 0xb5, 0xef, 0xb7, 0xec, 0x7e, 0xf6, 0x30, 0xe7, 0x4f, 0xbc,
    0x06, 0xc0, 0xa9, 0xe1, 0x61, 0x40, 0x47, 0x88, 0x77, 0x63, 0x8f, 0x0c,
    0x1f, 0x65, 0xcd, 0xe0, 0x16, 0xfa, 0x37, 0x6d, 0xa2, 0x14, 0x47, 0x8c,
    0xfd, 0xf3, 0x2f, 0x08, 0x29, 0xb0, 0x4a, 0xc5, 0x46, 0x12, 0xf0, 0x3e,
    0xc0, 0x72, 0x11, 0x53, 0x11, 0x09, 0xe2, 0x99, 0x12, 0x8f, 0xfd, 0xe1,
    0x30, 0x76, 0xef, 0x1a, 0xd0, 0x05, 0x6b, 0x07, 0x07, 0x39, 0x35, 0x7c,
    0x94, 0x0d, 0x5b, 0xb7, 0x22, 0x85, 0xcf, 0x9b, 0xaf, 0x0c, 0x03, 0xb0,
    0x61, 0xeb, 0x56, 0x74, 0x55, 0x41, 0x11, 0x31, 0x2f, 0x3f, 0xf2, 0x30,
    0x2d, 0x9e, 0x4b, 0x54, 0x77, 0x98, 0xca, 0x4d, 0x51, 0x7b, 0xfe, 0xc0,
    0x82, 0xbb, 0x64, 0xde, 0x82, 0x17, 0x1f, 0xdf, 0x23, 0xd3, 0x51, 0x44,
    0x2a, 0x8e, 0xc8, 0x97, 0x2b, 0x84, 0x9a, 0xce, 0xd2, 0x4f, 0x6c, 0xe7,
    0x81, 0xef, 0x3f, 0x01, 0x69, 0x1b, 0x0f, 0x81, 0x8e, 0x40, 0x8d, 0x81,
    0xc0, 0xe1, 0xd9, 0x5f, 0x1d, 0x64, 0x95, 0x6e, 0x52, 0xaf, 0xcf, 0x62,
    0xa8, 0x2a, 0x67, 0x5e, 0xfa, 0x33, 0x61, 0x71, 0x1a, 0xc7, 0x2d, 0x32,
    0x61, 0x75, 0xb3, 0x73, 0xef, 0xcf, 0x16, 0x64, 0xc3, 0x7c, 0x1b, 0xaa,
    0x51, 0x9d, 0x58, 0xc2, 0x5b, 0x33, 0x79, 0x8c, 0x40, 0xa7, 0x3d, 0x25,
    0xc9, 0x9c, 0x79, 0x8d, 0xfd, 0x9f, 0xfe, 0x08, 0x55, 0x37, 0x44, 0xa8,
    0x3a, 0x56, 0xa6, 0x85, 0xae, 0xde, 0x75, 0x64, 0xd6, 0xaf, 0x63, 0x73,
    0xff, 0x2a, 0x2c, 0xbb, 0x85, 0x89, 0xa3, 0xef, 0x70, 0xfa, 0xaf, 0x2f,
    0xa0, 0x38, 0x05, 0x42, 0x19, 0x21, 0x48, 0xd2, 0xdf, 0x9c, 0x5e, 0x68,
    0x02, 0xde, 0x07, 0x48, 0x0a, 0x49, 0xbe, 0xe4, 0xa0, 0x49, 0x81, 0x61,
    0x4a, 0x9a, 0x3b, 0xd2, 0xd4, 0x1c, 0x9f, 0x40, 0x6d, 0x66, 0xe5, 0xb6,
    0xed, 0x68, 0x4d, 0x36, 0xb3, 0xa7, 0xdf, 0x44, 0xd4, 0xe6, 0x60, 0xec,
    0x14, 0x67, 0x46, 0x5f, 0x27, 0x37, 0x3a, 0x42, 0x22, 0x72, 0x89, 0x3d,
    0x97, 0x64, 0x53, 0x86, 0x52, 0x2e, 0x87, 0x13, 0xaa, 0xe4, 0x8b, 0x15,
    0x36, 0x36, 0x0a, 0x20, 0x32, 0xed, 0xc4, 0xc5, 0xf3, 0xe8, 0x86, 0x86,
    0x99, 0x08, 0x28, 0x95, 0xf3, 0x38, 0x5e, 0x48, 0xde, 0x51, 0x08, 0x5f,
    0xfd, 0x3b, 0x95, 0xc0, 0xa2, 0x47, 0xaf, 0x92, 0xe8, 0x6a, 0xe2, 0xdc,
    0xb9, 0x02, 0x5e, 0xa1, 0x8e, 0x1e, 0x16, 0xa9, 0x86, 0x2e, 0xb6, 0x6d,
    0x93, 0x9b, 0x29, 0x62, 0xa8, 0x29, 0x1c, 0x60, 0xc0, 0x58, 0x78, 0x27,
    0xce, 0x17, 0x61, 0xb4, 0x6a, 0x3d, 0x96, 0x66, 0xa0, 0x68, 0x1e, 0x81,
    0xa6, 0xe2, 0x4a, 0xc9, 0x54, 0xde, 0x23, 0x6d, 0xe8, 0x8c, 0x4d, 0xe4,
    0xc8, 0xc4, 0x53, 0x74, 0xa4, 0x15, 0x5e, 0x3f, 0x79, 0x8e, 0xe2, 0xf8,
    0x04, 0x41, 0x7d, 0x92, 0xba, 0xef, 0x81, 0x9a, 0xa2, 0xe6, 0x2b, 0xb8,
    0x9e, 0x47, 0xae, 0x5e, 0x43, 0x35, 0x93, 0x78, 0x3b, 0xbe, 0xd4, 0x38,
    0xc0, 0x2d, 0x3b, 0x3f, 0x2f, 0x94, 0xb4, 0x86, 0x47, 0x12, 0x55, 0xd3,
    0x89, 0x23, 0x95, 0x84, 0xa1, 0x92, 0x2d, 0xd7, 0x69, 0x6d, 0x92, 0xb4,
    0xb4, 0xd8, 0xbc, 0x3d, 0x59, 0xa2, 0x5a, 0x8f, 0xd0, 0xb4, 0x10, 0x42,
    0x83, 0x8a, 0x0b, 0x93, 0x85, 0x12, 0xf9, 0x92, 0x83, 0x30, 0x53, 0x24,
    0x5b, 0x2c, 0xe6, 0x36, 0x6e, 0x66, 0xcb, 0x96, 0x2d, 0x8d, 0xcf, 0x01,
    0x80, 0xfa, 0xfa, 0x5b, 0x30, 0x0c, 0x03, 0xc3, 0xb4, 0x51, 0x55, 0x15,
    0xc3, 0x4c, 0xb0, 0xb4, 0xcd, 0xc6, 0x4c, 0xa7, 0x99, 0x29, 0xb8, 0x4c,
    0xd6, 0x24, 0x22, 0xa1, 0x32, 0x5b, 0x87, 0x6c, 0xb9, 0x4c, 0x14, 0x82,
    0xef, 0xfb, 0xcc, 0x79, 0x2e, 0x9e, 0xae, 0x23, 0x7a, 0xd7, 0x31, 0xf0,
    0x81, 0x0f, 0x2f, 0xf8, 0xf5, 0x97, 0x01, 0xdc, 0x7d, 0xcf, 0x67, 0xc5,
    0xec, 0xb2, 0xcd, 0x94, 0x2a, 0x65, 0x44, 0x52, 0x90, 0x69, 0xb2, 0x88,
    0xa2, 0x00, 0x81, 0xca, 0xac, 0xe3, 0x91, 0x34, 0x04, 0xe5, 0x20, 0x66,
    0xba, 0x5c, 0xc5, 0x93, 0x92, 0x0b, 0x95, 0x32, 0x73, 0x42, 0x23, 0xd5,
    0x63, 0x71, 0xd2, 0x6c, 0x47, 0xfb, 0xe0, 0xf6, 0x86, 0x5e, 0x0f, 0x57,
    0x59, 0x46, 0x07, 0x0f, 0x3c, 0x25, 0xa7, 0x46, 0x5f, 0xa6, 0x2d, 0x37,
    0x4d, 0x53, 0xca, 0x60, 0x49, 0x4a, 0xc5, 0x15, 0x49, 0x54, 0x29, 0xa9,
    0xf9, 0x31, 0xbe, 0xef, 0x13, 0x29, 0x1a, 0x52, 0x85, 0xac, 0x96, 0xc2,
    0x5a, 0x62, 0x31, 0x98, 0xb1, 0xf8, 0x50, 0x4f, 0x3f, 0x2b, 0x3a, 0x52,
    0x54, 0xaa, 0x25, 0xde, 0x29, 0x15, 0x28, 0x8f, 0x4d, 0xb0, 0xec, 0xa1,
    0x1f, 0x5f, 0x13, 0xe8, 0x8a, 0x00, 0xef, 0xe9, 0xe9, 0xdf, 0x3d, 0x27,
    0xc7, 0x73, 0x59, 0x44, 0x75, 0x8e, 0xc8, 0xad, 0xe1, 0x4b, 0x05, 0x43,
    0x68, 0x84, 0xa6, 0x81, 0x6e, 0x37, 0xf3, 0x29, 0x59, 0xa1, 0xbb, 0x4b,
    0xc7, 0x9c, 0xcd, 0x62, 0xf7, 0xdd, 0x40, 0xaa, 0xad, 0x03, 0xb7, 0xe2,
    0xa3, 0x44, 0x0e, 0x86, 0x65, 0x30, 0x76, 0xfa, 0x2c, 0xa7, 0xdf, 0x18,
    0xa5, 0x7f, 0xf5, 0xb2, 0xab, 0x82, 0x5c, 0x13, 0xe0, 0x5a, 0xba, 0xf0,
    0xa3, 0x3d, 0x52, 0x94, 0x0b, 0x58, 0x1b, 0x6f, 0x62, 0xeb, 0xce, 0x3b,
    0x99, 0x3e, 0x79, 0x1c, 0x27, 0x3b, 0x4a, 0xec, 0x38, 0x44, 0x9e, 0x4b,
    0xad, 0x52, 0x24, 0x0a, 0x34, 0xce, 0xe7, 0xaa, 0x14, 0x42, 0x9f, 0xf1,
    0x8b, 0x53, 0x0c, 0xf6, 0xb5, 0xb3, 0x69, 0xef, 0xc1, 0x4b, 0x40, 0x16,
    0x05, 0x30, 0xfe, 0xc3, 0x3d, 0x32, 0x2a, 0x16, 0x59, 0x7b, 0xdb, 0x36,
    0xa6, 0x2f, 0xe6, 0xb1, 0xe3, 0x02, 0x19, 0x3b, 0x81, 0x5b, 0xae, 0x52,
    0x9e, 0xab, 0x10, 0xf8, 0xe0, 0x87, 0x31, 0x79, 0xd7, 0x27, 0x14, 0x06,
    0x22, 0x0a, 0x98, 0xaa, 0xd4, 0x38, 0x5f, 0x8d, 0xb8, 0xbd, 0xaf, 0x83,
    0xe5, 0x8f, 0xfd, 0x7c, 0x1e, 0xa2, 0xa1, 0x2f, 0x19, 0xc0, 0xdb, 0xfb,
    0x76, 0xcb, 0x66, 0x11, 0xd2, 0xd1, 0xdd, 0x49, 0x6d, 0x6c, 0x14, 0xdb,
    0xcd, 0x31, 0x93, 0x2b, 0x33, 0x3d, 0x9e, 0xc7, 0x0f, 0x1c, 0x7c, 0x19,
    0xd1, 0xfb, 0xc8, 0x7e, 0x6e, 0xfd, 0xf5, 0x61, 0xb4, 0xa4, 0x49, 0xbb,
    0xad, 0x62, 0x27, 0xa0, 0xab, 0xd9, 0x24, 0xad, 0xaa, 0x9c, 0xca, 0x57,
    0x19, 0xfa, 0xee, 0x57, 0xe7, 0x97, 0x55, 0xc3, 0x00, 0xa5, 0x6a, 0xc0,
    0x74, 0xde, 0x21, 0xdd, 0x0a, 0x8a, 0x13, 0xe3, 0xd7, 0x3d, 0x5a, 0xdb,
    0x20, 0xef, 0x3a, 0x54, 0xeb, 0x82, 0x4a, 0x4d, 0xa1, 0xb7, 0xbb, 0x93,
    0x54, 0x77, 0x0f, 0x5b, 0x1e, 0x7f, 0x92, 0xbb, 0x5f, 0x18, 0xc2, 0x8b,
    0x43, 0xe2, 0x38, 0xa6, 0xd5, 0x54, 0x38, 0x3b, 0x79, 0x11, 0x5b, 0xb5,
    0xe6, 0xe3, 0x5d, 0xf3, 0x4f, 0x78, 0x25, 0xf9, 0xb1, 0x4f, 0x4c, 0x4c,
    0xa5, 0xe0, 0xa1, 0x0b, 0x88, 0x23, 0xc0, 0x07, 0xd3, 0x52, 0x70, 0x63,
    0x68, 0xeb, 0x4c, 0x72, 0xe8, 0x9e, 0x3b, 0x40, 0x13, 0xb4, 0x7d, 0xe6,
    0x41, 0x36, 0xdc, 0x38, 0x88, 0xe3, 0x06, 0x18, 0x8a, 0x46, 0x4a, 0xd7,
    0x49, 0x1b, 0x26, 0x55, 0xaf, 0x36, 0x1f, 0xaf, 0xe1, 0x0c, 0x74, 0x98,
    0x16, 0x91, 0x65, 0x51, 0x29, 0x07, 0xd4, 0xeb, 0x1e, 0x49, 0x53, 0xc1,
    0x32, 0x14, 0xfa, 0x1f, 0xda, 0xcf, 0x27, 0x7f, 0xf2, 0x1c, 0xe5, 0xaa,
    0x24, 0x69, 0xea, 0xc4, 0x91, 0x47, 0xf8, 0xa7, 0x5f, 0xf0, 0xfb, 0x5b,
    0x37, 0x62, 0x6a, 0x09, 0x8c, 0xa4, 0x46, 0xa5, 0xe6, 0x71, 0x63, 0x7f,
    0x17, 0x19, 0xd3, 0x5c, 0x3c, 0x40, 0x24, 0x25, 0xc7, 0xc7, 0x26, 0xa8,
    0x85, 0x0a, 0xa1, 0xa7, 0x50, 0xaa, 0x06, 0x94, 0xcb, 0xe1, 0xbb, 0x69,
    0xef, 0x59, 0x81, 0xe3, 0xd4, 0xd1, 0x90, 0x34, 0xdb, 0x2d, 0xf8, 0xb1,
    0x44, 0xd1, 0x21, 0x12, 0x21, 0x81, 0x14, 0x58, 0x29, 0x93, 0x30, 0x4c,
    0x90, 0x5b, 0xb2, 0x7c, 0x3e, 0x5e, 0xc3, 0x16, 0x1c, 0xeb, 0xdb, 0xcc,
    0xc7, 0x95, 0x90, 0x63, 0xe7, 0xb2, 0x2c, 0x6f, 0x4d, 0xd1, 0xd3, 0x6c,
    0x12, 0x27, 0x25, 0x43, 0x7b, 0x3e, 0x87, 0x53, 0x73, 0xf0, 0x02, 0x50,
    0x01, 0xd7, 0x2b, 0x93, 0x34, 0x32, 0xc4, 0x8a, 0xcf, 0xd4, 0x6c, 0x99,
    0xee, 0xd5, 0xcb, 0xe8, 0x4b, 0x69, 0xe4, 0xa2, 0x80, 0xd6, 0x8f, 0xdd,
    0xb6, 0xf8, 0x0c, 0xdc, 0xfb, 0xc5, 0xaf, 0x88, 0x7f, 0xa4, 0x06, 0x58,
    0xb9, 0xb2, 0x9d, 0xa6, 0x76, 0x8b, 0x23, 0x23, 0x13, 0xbc, 0x72, 0xae,
    0xc8, 0x64, 0x59, 0xe2, 0x86, 0x06, 0x7e, 0x18, 0x10, 0x85, 0x82, 0x30,
    0x32, 0x28, 0x49, 0x83, 0x5c, 0x0d, 0x44, 0xaa, 0x89, 0x4e, 0x2d, 0xa4,
    0xde, 0xd5, 0xcc, 0xc5, 0x8d, 0x37, 0x5d, 0x32, 0xae, 0x1b, 0x06, 0x00,
    0xd8, 0xf5, 0xcd, 0xdd, 0xe2, 0x8d, 0xae, 0x8f, 0xf2, 0xb7, 0x82, 0x64,
    0x7d, 0x7f, 0x07, 0x1b, 0x3a, 0x53, 0x48, 0xcb, 0xe0, 0xe4, 0x74, 0x91,
    0xff, 0x4c, 0xe4, 0x39, 0x92, 0x2d, 0xe0, 0x24, 0xd2, 0x24, 0x4d, 0x1d,
    0x4b, 0xc0, 0xb6, 0x1d, 0xb7, 0x73, 0xa8, 0xa4, 0x30, 0xd2, 0xb2, 0x86,
    0xbb, 0x76, 0xdc, 0x71, 0xc9, 0x20, 0x6a, 0xd8, 0x82, 0xf7, 0x74, 0xdf,
    0xd7, 0xee, 0x15, 0xff, 0x1e, 0xbe, 0x41, 0x1e, 0x1b, 0x19, 0x21, 0x3b,
    0x31, 0x4e, 0x22, 0x9b, 0x67, 0xc0, 0x4e, 0xb2, 0x24, 0x9d, 0xc1, 0x43,
    0xe1, 0x5f, 0x95, 0x02, 0x9e, 0xba, 0x14, 0xab, 0x6d, 0x0d, 0x63, 0xc5,
    0x80, 0x28, 0xd5, 0xc1, 0xce, 0x1d, 0x77, 0x5e, 0x36, 0x8e, 0x17, 0x3d,
    0x8a, 0xff, 0x57, 0x43, 0x43, 0x43, 0x32, 0x9f, 0xcf, 0xe3, 0x79, 0x1e,
    0xaa, 0xaa, 0x62, 0xdb, 0x36, 0x27, 0x4e, 0x9c, 0x04, 0xe0, 0xe6, 0x9b,
    0xaf, 0xbe, 0x25, 0xaf, 0x1b, 0xc0, 0x62, 0xb5, 0xa8, 0x1a, 0xb8, 0x9e,
    0xfa, 0x2f, 0x98, 0xa1, 0x19, 0xac, 0x91, 0x78, 0x7b, 0x96, 0x00, 0x00,
    0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

static const char* const image1_data[] = { 
"22 22 465 2",
"e. c #00001b",
"d. c #000022",
"cO c #000025",
"ct c #000029",
"b9 c #00002e",
"bu c #000032",
"b. c #000135",
"a8 c #000157",
"#p c #000200",
"c8 c #00024c",
"a# c #00031e",
"du c #000322",
"aP c #00032e",
"bN c #000361",
"a. c #000427",
"#l c #000500",
"c9 c #00053a",
"#r c #00060c",
"#P c #000618",
"aO c #000642",
"bM c #00075a",
"a9 c #00084d",
"d9 c #00092f",
"eY c #000a20",
"av c #000a2f",
"at c #000a45",
"b0 c #000b00",
"eI c #000b2b",
"ds c #000b49",
"aN c #000b54",
"#q c #000c0d",
"#s c #000c14",
"a3 c #000d00",
"b7 c #000d67",
"es c #001031",
"d8 c #00103d",
"bs c #00106b",
"dr c #001455",
"bV c #001500",
"dN c #001545",
"a7 c #001569",
"#G c #001700",
"#j c #001800",
"bG c #001900",
"bU c #001b00",
"a6 c #001b5b",
"bW c #001c00",
"bm c #001d00",
"aM c #001d67",
"br c #001d74",
"c7 c #001e68",
"b6 c #001f6f",
"c6 c #00245b",
"#2 c #002700",
"dq c #00275d",
"er c #00284e",
"b5 c #002a52",
"bY c #002b00",
"cp c #002b54",
"bq c #002b66",
"ci c #003000",
"bL c #003060",
"bX c #003100",
"dM c #003566",
"cL c #003763",
"cD c #003800",
"#F c #005500",
"bA c #006900",
"bi c #006b00",
"aG c #006e00",
"a1 c #007600",
"aZ c #007d00",
"#0 c #007f00",
"aE c #008000",
"aW c #008200",
"bf c #008600",
"be c #008b00",
"ak c #008e00",
"aD c #009400",
"aC c #009600",
"aV c #00a400",
"aB c #00a600",
"#m c #010002",
"#k c #011804",
"bj c #027900",
"#t c #030d16",
"al c #038602",
"aY c #048700",
"bO c #05115b",
"bt c #05135e",
"aX c #058e00",
"#n c #060000",
"b8 c #061058",
"au c #062051",
"bg c #077b00",
"a0 c #078404",
"ck c #080100",
"dP c #080b2e",
"dt c #081643",
"bk c #087e06",
"cs c #091758",
"dO c #0a0d38",
"aF c #0b8d07",
"#o c #0c0904",
"bh c #0c7a00",
"cN c #0d2271",
"bC c #0f610c",
"bZ c #0f6f01",
"bl c #0f740a",
"c1 c #150004",
"bF c #158016",
"c0 c #1b1311",
"bB c #1c7a24",
"cr c #1e3288",
"af c #20d518",
"bD c #217200",
"cM c #245ca7",
"ai c #24d52c",
"a2 c #258426",
"cG c #280e17",
"ag c #2cdd37",
"aj c #2dd631",
"cq c #2f68b5",
"#D c #2fd12e",
"ah c #2fdf3f",
"aA c #30cf2a",
"bE c #318e0c",
"aU c #32d232",
"#Y c #32df38",
"cF c #332314",
"#C c #37da3f",
"#Z c #39e338",
"#1 c #3dba42",
"#X c #3de258",
"#V c #3ec336",
"#W c #41d857",
"#h c #42d144",
"#g c #43d953",
"an c #489e45",
"cC c #49b758",
"bd c #4dda4e",
"bK c #51c8e8",
"cK c #53c1e2",
"am c #55cc54",
"ch c #56ca4f",
"ae c #57e24b",
"bz c #58bd57",
"#E c #58d658",
"b4 c #59d9f4",
"dL c #5ab1dc",
"cg c #5aca5e",
"cf c #5d8467",
"#N c #5f7b93",
"c4 c #5f7e9b",
"cJ c #5f87aa",
"#3 c #62935c",
"cj c #636e44",
"aJ c #637279",
"b3 c #6386b0",
"#U c #64c752",
"#B c #64ec80",
"#M c #657c8e",
"aw c #66758a",
"cn c #6690b8",
"aH c #66cc66",
"cE c #67854f",
"co c #67e0fd",
"#L c #686f77",
"bJ c #6888ae",
"bo c #6a869e",
"#8 c #6a86ab",
"dp c #6ac3ed",
"bp c #6ac8ee",
"ar c #6b81b0",
"aK c #6c8eb4",
"aI c #6d936c",
"bT c #6daa67",
"a4 c #6f8495",
"#Q c #707c88",
"ao c #71906e",
"aQ c #727e98",
"bv c #737695",
"bn c #74887d",
"#4 c #758270",
"bP c #767594",
"c5 c #76d8ff",
"b2 c #777091",
"aq c #7785a2",
"#7 c #78849c",
"#6 c #797b88",
"bH c #799275",
"d7 c #79c8f1",
"cX c #79cb81",
"cu c #7a7b90",
"dv c #7a7e8a",
"aa c #7a8a9a",
"cm c #7b779c",
"c. c #7b7b95",
"#u c #7b7f88",
"cY c #7bce7c",
"b1 c #7c7a7b",
"a5 c #7cbde5",
"#J c #7d777b",
"cI c #7d7799",
"ce c #7d8180",
"cP c #7e7f91",
"b# c #7e85a2",
"#5 c #7f7d82",
"#f c #7fd692",
"c3 c #80728b",
"#I c #80827d",
"#H c #809a7f",
"eq c #80c6ea",
"d# c #818493",
"cl c #85788a",
"eH c #85bedb",
"bI c #868597",
"ap c #868e91",
"cd c #87907b",
".W c #87eb88",
"#A c #89f59f",
"#K c #8c8a8d",
"as c #8eade6",
"aL c #8fb9f5",
".X c #91f088",
"#z c #93e789",
"cH c #97809a",
"eG c #98c1d3",
"d6 c #98d1ec",
"dK c #99cfeb",
"cW c #9ab5ae",
"aT c #9ac99d",
"d5 c #9cc0cc",
"dh c #9ccd9e",
"c2 c #9d7b93",
"#y c #9ddc8b",
"#T c #9ed199",
"#i c #9ee28d",
"eE c #a0a5a1",
".8 c #a2acab",
"eJ c #a2b0cb",
"fh c #a3c7d7",
".V c #a3ccaa",
"eN c #a5a4ac",
"cb c #a5c9a5",
"az c #a5d7a6",
"bR c #a6c0a7",
"#a c #a6c3a7",
"eZ c #a7cbe3",
"ep c #a7d9f0",
"ad c #a7dca6",
"ca c #a8d2ae",
"di c #a8d8a4",
"fi c #a9c8da",
"do c #a9cde7",
"eo c #aac8d2",
"#e c #aad9b5",
"#b c #abc6a7",
".n c #abcbbe",
"cw c #abd0ae",
"cx c #acc5a8",
"ea c #ada9c0",
"#O c #adc3da",
".4 c #aeafa7",
"bc c #aed8b0",
"#x c #aedaa9",
"eW c #afbec3",
".b c #afc4c5",
"by c #afd8ae",
"#R c #b0b9c2",
".Y c #b0c99f",
"#S c #b0c9b3",
"#c c #b0cba0",
"cV c #b1aec1",
"dj c #b1c4b0",
".J c #b1cbbe",
"#9 c #b1d1fa",
"dQ c #b2b2cc",
"#w c #b2d3b4",
"ew c #b3b1bc",
"e3 c #b3b2ba",
".1 c #b3b3bf",
"ff c #b3bec0",
".U c #b3bfbb",
".B c #b3c392",
"bS c #b3d9b2",
".i c #b4a6c9",
"ax c #b4c0ce",
".0 c #b5b8bf",
".K c #b5c6b4",
".6 c #b5c6bc",
"#d c #b5d6ab",
".D c #b6aec5",
"bb c #b6b0ba",
"dI c #b6b5ba",
".p c #b6bea7",
"d4 c #b6c0bf",
".o c #b6c8b2",
"cc c #b6c9a9",
"fg c #b6ccd7",
"eX c #b6d2de",
".C c #b7b9b6",
"fj c #b7bed0",
"ac c #b7c0bd",
".T c #b7c2b4",
".I c #b8c3bb",
".m c #b8c7c0",
"cB c #b8d4c6",
"## c #b9b7bc",
"f. c #b9c2cb",
".a c #b9c4c8",
"dD c #b9c5b7",
".x c #b9ccc8",
".c c #bab6c5",
"fk c #bab8c5",
"ex c #bac1cb",
"dC c #bac2c5",
"eF c #bad1d9",
"dd c #bbb2b3",
".q c #bbbbaf",
".M c #bbbeb5",
"cS c #bbc2b2",
".S c #bbc4b3",
".A c #bbcc98",
"eK c #bcb8cf",
"fn c #bcbbc0",
"ey c #bcc0c9",
"eg c #bcc0cb",
"f# c #bcc1c7",
".w c #bcc7c3",
"dJ c #bcd3e3",
"ay c #bdbac3",
"fl c #bdbbc6",
"dX c #bdbfcb",
"dB c #bdbfcc",
"eR c #bdc0c5",
"ef c #bdc0c7",
"eh c #bdc0c9",
"df c #bdc0d1",
"e9 c #bdc1c4",
"dE c #bdc5ae",
".7 c #bdcec6",
"cZ c #bddcbc",
"db c #bebcb0",
"dw c #bebfc3",
"aR c #bec7d8",
"e0 c #bec9dd",
".5 c #becabe",
"bx c #becac0",
".O c #bfb9bb",
"cv c #bfbcc7",
"e1 c #bfbccd",
"eu c #bfbccf",
"e5 c #bfbec3",
"bw c #bfbed0",
"dY c #bfbfc7",
"dW c #bfbfc9",
".R c #bfc5b9",
"dg c #bfd3d2",
".P c #c0b7bc",
".h c #c0b8dd",
"dA c #c0bec9",
"ec c #c0becb",
"ez c #c0bfc4",
"cQ c #c0bfc5",
"fa c #c0c0c2",
"ab c #c0ccd8",
"cR c #c0cdb9",
"fd c #c1bab2",
"eS c #c1bab4",
"dV c #c1bec5",
"eQ c #c1bfc0",
"ei c #c1bfc2",
"ee c #c1bfc4",
"e8 c #c1c0be",
".y c #c1c1cb",
"ba c #c1c4d7",
"fb c #c2bdb9",
"dS c #c2c0cb",
"#. c #c2c1c6",
"dR c #c2c1d1",
"fo c #c2c2c4",
".z c #c2c3bd",
"#v c #c2c5cc",
"ek c #c3b5ac",
"dz c #c3bec4",
".N c #c3c2be",
"da c #c3c4c8",
".9 c #c3c7ca",
"eA c #c4bebe",
"dZ c #c4bec0",
"dn c #c4bfd3",
"bQ c #c4c1d2",
"dm c #c5aabb",
"dG c #c5b8af",
"de c #c5c0c7",
"eb c #c5c2d3",
"cz c #c6b6b9",
"eT c #c6bdb4",
"dU c #c6bdbe",
"ej c #c6bebb",
"dy c #c6bebc",
"e7 c #c6bfb7",
"cT c #c6bfb9",
"c# c #c6c2d1",
"eL c #c6c3d6",
"fe c #c6c5c1",
"eC c #c7bab1",
"dx c #c7bdbb",
"em c #c7c0b6",
"dk c #c7c1c1",
"e2 c #c7c5d2",
".Q c #c7cac1",
"en c #c7d0cd",
"dT c #c8bcbc",
"d0 c #c8bdb7",
"ed c #c8bdbb",
"e6 c #c8beb4",
"eP c #c8beb5",
"d3 c #c8c2b6",
"fm c #c8c7cd",
".v c #c9b1bf",
"eD c #c9c2b8",
"eM c #c9c7d5",
"el c #cabcaf",
".r c #cac5bf",
"cy c #cac6bb",
"dc c #cac7c0",
".H c #cbb1b0",
"fc c #cbc2bb",
".g c #ccc1d2",
"eU c #ccc5bd",
"dF c #ccc6b6",
".L c #ccd7c6",
"cA c #cdc0d4",
".s c #cdc2c6",
".j c #ceb4cd",
".t c #cfc2c9",
"cU c #cfc4cc",
"e4 c #cfced4",
"eV c #cfd0cb",
".u c #d0a8c0",
".f c #d0baa2",
".d c #d0bbc2",
"et c #d0cce7",
"d1 c #d1bfb3",
"d2 c #d1c1b2",
".3 c #d1c3c3",
"aS c #d1c6d6",
".E c #d1c9e1",
"eO c #d1d0d6",
"dH c #d2c4c1",
"eB c #d2c8bf",
"e# c #d3cfea",
".F c #d4c3d6",
".G c #d5b2b9",
".2 c #d6c7ce",
".# c #d7b0cb",
".l c #d7b9b7",
"ev c #dad8e5",
"dl c #dcc0cc",
".e c #ddc3a8",
".Z c #ddd8d2",
".k c #deb0ba",
"Qt c #e9abd2",
"Qt.#.a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t",
".u.v.w.x.y.z.A.B.C.D.E.F.G.H.I.J.K.L.M.N.O.P",
".Q.R.S.T.U.V.W.X.Y.Z.0.1.2.3.4.5.6.7.8.9#.##",
"#a#b#c#d#e#f#g#h#i#j#k#l#m#n#o#p#q#r#s#t#u#v",
"#w#x#y#z#A#B#C#D#E#F#G#H#I#J#K#L#M#N#O#P#Q#R",
"#S#T#U#V#W#X#Y#Z#0#1#2#3#4#5#6#7#8#9a.a#aaab",
"acadaeafagahaiajakalamanaoapaqarasatauavawax",
"ayazaAaBaCaDakaDaEaFaGaHaIaJaKaLaMaNaOaPaQaR",
"aSaTaUaVakaWaXaYaZa0a1a2a3a4a5a6a7a8a9b.b#ba",
"bbbcbdbebfbgbhbibjbkblbmbnbobpbqbrbsbtbubvbw",
"bxbybzbAbBbCbDbEbgbFbGbHbIbJbKbLbMbNbObubPbQ",
"bRbSbTbUbVbWbXbYbZ#2b0b1b2b3b4b5b6b7b8b9c.c#",
"cacbcccdcecfcgchcicjckclcmcncocpcqcrcsctcucv",
"cwcxcyczcAcBcCcDcEcFcGcHcIcJcKcLcMcNatcOcPcQ",
"cRcScTcUcVcWcXcYcZc0c1c2c3c4c5c6c7c8c9d.d#da",
"dbdcdddedfdgdhdidjdkdldmdndodpdqdrdsdtdudvdw",
"dxdydzdAdBdCdDdEdFdGdHdIdJdKdLdMdNdOdPdQdRdS",
"dTdUdVdWdXdYdZd0d1d2d3d4d5d6d7d8d9e.e#eaebec",
"eddyeeefegeheiejekelemeneoepeqereseteaeuevew",
"d0ejeiefexeyezeAeBeCeDeEeFeGeHeIeJeKeLeMeNeO",
"ePcTeQeRexexeReQeSeTeUeVeWeXeYeZe0e1e2e3e4e5",
"e6e7e8e9f.f.f#fafbfcfdfefffgfhfifjfkflfmfnfo"};

static const unsigned char image2_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x73, 0x7a, 0x7a, 0xf4, 0x00, 0x00, 0x05,
    0xcd, 0x49, 0x44, 0x41, 0x54, 0x58, 0x85, 0xed, 0x97, 0x5d, 0x6c, 0x1c,
    0x57, 0x15, 0x80, 0xbf, 0x3b, 0xfb, 0xeb, 0x5d, 0x7b, 0x77, 0xe3, 0xd8,
    0x51, 0xac, 0x94, 0xe0, 0xa6, 0x98, 0x84, 0x00, 0x55, 0x20, 0x12, 0x8a,
    0x10, 0x28, 0xce, 0x43, 0x84, 0x04, 0x4a, 0xb1, 0x14, 0x95, 0x88, 0xe5,
    0x21, 0x4e, 0x25, 0x5b, 0x8d, 0x09, 0x6a, 0x55, 0xe4, 0x40, 0x23, 0x81,
    0x51, 0xa9, 0xca, 0x3f, 0x2a, 0x88, 0xba, 0x91, 0xc2, 0x0b, 0x2a, 0xd0,
    0xaa, 0x80, 0x84, 0xa8, 0x94, 0x07, 0x14, 0x21, 0xf3, 0x40, 0x50, 0x03,
    0xc1, 0x8d, 0x1a, 0x51, 0x93, 0x46, 0x78, 0x6d, 0xa7, 0x8d, 0xb3, 0xb1,
    0x37, 0xb3, 0xff, 0xf3, 0x7b, 0x0f, 0x0f, 0x6b, 0x8f, 0xbd, 0xac, 0x37,
    0x71, 0x29, 0x6f, 0x70, 0xa4, 0xd1, 0xdc, 0x9f, 0x73, 0xcf, 0xf9, 0xee,
    0xb9, 0x67, 0x8e, 0xee, 0xa8, 0x8b, 0x17, 0x2f, 0xf2, 0x4e, 0x64, 0x64,
    0x7c, 0x52, 0x00, 0xf6, 0x0c, 0xec, 0xa4, 0x2b, 0x99, 0x6c, 0x9a, 0xbb,
    0x3e, 0x7b, 0x83, 0x3b, 0xc5, 0x32, 0xe7, 0xbe, 0x37, 0xa6, 0x36, 0x6b,
    0x2f, 0xbc, 0x59, 0xc5, 0xd3, 0x4f, 0xbf, 0x20, 0x9f, 0x38, 0xf0, 0x20,
    0x3f, 0x7d, 0xf6, 0xab, 0x7c, 0xec, 0xa3, 0x7b, 0x00, 0x10, 0x40, 0x6b,
    0x69, 0x34, 0x14, 0x84, 0x0c, 0xc5, 0x1b, 0x6f, 0xce, 0xf1, 0xd7, 0xe9,
    0x19, 0xf9, 0xcd, 0x2b, 0x7f, 0xe4, 0xc9, 0x53, 0x43, 0xf7, 0x04, 0x51,
    0xf7, 0x8a, 0xc0, 0xc8, 0xf8, 0xa4, 0x1c, 0x1b, 0x3a, 0xc4, 0xe8, 0x23,
    0x47, 0x48, 0x25, 0x93, 0xa0, 0x04, 0xbb, 0xee, 0x61, 0x18, 0x06, 0x5a,
    0x6b, 0xc2, 0xe1, 0x10, 0xc6, 0xba, 0x6d, 0x88, 0x48, 0xf0, 0x7e, 0xf1,
    0xd7, 0x17, 0xf8, 0xf9, 0xcb, 0x7f, 0xe0, 0xdb, 0x67, 0xbe, 0xd0, 0x16,
    0xe4, 0xae, 0x00, 0x5f, 0xfa, 0xda, 0x59, 0x79, 0x7c, 0xec, 0x73, 0x1c,
    0xf9, 0xf4, 0xc7, 0x41, 0x04, 0x11, 0x41, 0x1a, 0xd6, 0xf1, 0x7d, 0x41,
    0xc4, 0x27, 0x1c, 0x0a, 0xa1, 0xd1, 0xa8, 0x15, 0xa7, 0x82, 0x6e, 0x02,
    0x99, 0xb9, 0xb6, 0xc0, 0x8f, 0x9f, 0xfb, 0x1d, 0x4f, 0x8c, 0x1e, 0xd9,
    0x10, 0xa2, 0x2d, 0xc0, 0xa9, 0xaf, 0x3f, 0x2f, 0xdf, 0x7c, 0xfa, 0xf3,
    0xec, 0xdf, 0xfb, 0xe1, 0xc0, 0xa0, 0xa0, 0xa9, 0x97, 0x5d, 0x6a, 0x15,
    0x17, 0xcf, 0x83, 0x64, 0x57, 0x84, 0x78, 0x92, 0xc0, 0xb9, 0x46, 0xaf,
    0x81, 0x06, 0xc0, 0x9a, 0x9b, 0xf9, 0xb7, 0x79, 0x72, 0xe2, 0x05, 0xbe,
    0x7b, 0xfa, 0x8b, 0x2d, 0x10, 0x1b, 0xe6, 0xc0, 0xc8, 0xf8, 0xa4, 0x9c,
    0x3c, 0x7d, 0x80, 0x0f, 0x0e, 0xec, 0xa2, 0xee, 0x54, 0xf0, 0x3d, 0xcd,
    0xe2, 0x42, 0x19, 0xbb, 0xee, 0xe1, 0x39, 0x7a, 0x8d, 0x3e, 0xaf, 0xd8,
    0xb9, 0xbb, 0x03, 0xad, 0x75, 0x93, 0x53, 0x2d, 0x7e, 0x53, 0xbf, 0x33,
    0xd9, 0xc1, 0xb1, 0xec, 0x00, 0x8f, 0x9e, 0xf9, 0x91, 0x9c, 0x7d, 0xe6,
    0xb1, 0x26, 0x88, 0x0d, 0x01, 0xf6, 0x0f, 0xa6, 0xd8, 0x3d, 0xd0, 0x8b,
    0x59, 0x2a, 0x91, 0xbf, 0x51, 0xa6, 0xb8, 0x54, 0xc7, 0xf3, 0xc0, 0x50,
    0x60, 0x84, 0xa3, 0x28, 0x23, 0x84, 0x61, 0x84, 0xd9, 0xb2, 0xdd, 0xa7,
    0x54, 0x2b, 0xe0, 0xbb, 0x02, 0x86, 0x46, 0x6b, 0x1d, 0x1c, 0x8f, 0x52,
    0x6b, 0xb9, 0x20, 0xc0, 0x03, 0x3b, 0xef, 0x67, 0xe7, 0x9e, 0x57, 0x5b,
    0x7c, 0xb5, 0x00, 0x3c, 0xf6, 0xd4, 0xa4, 0x3c, 0x3c, 0xb6, 0x15, 0xed,
    0xc0, 0xe5, 0xbf, 0xdd, 0xc0, 0xb5, 0xea, 0x08, 0x8a, 0x50, 0x38, 0x46,
    0x38, 0x1c, 0x45, 0x29, 0x07, 0x80, 0x50, 0xd4, 0xa5, 0x53, 0xbb, 0x98,
    0x15, 0x9f, 0xe2, 0x2d, 0x4d, 0xbc, 0x53, 0x63, 0xd7, 0x0c, 0x42, 0x11,
    0x21, 0x12, 0x13, 0x42, 0xa1, 0x95, 0x68, 0x00, 0x4a, 0x83, 0x88, 0x22,
    0xd3, 0x77, 0x93, 0x47, 0xcf, 0xfc, 0x40, 0xce, 0x3e, 0xf3, 0x65, 0xd5,
    0x16, 0x60, 0xff, 0x60, 0x07, 0x4b, 0xb7, 0xca, 0xcc, 0x98, 0x4b, 0x58,
    0xb7, 0x43, 0xa0, 0xc2, 0xc4, 0x12, 0x5d, 0xe0, 0x79, 0x80, 0x07, 0xc0,
    0x96, 0xed, 0x16, 0x5d, 0xbd, 0x55, 0x2a, 0x8e, 0x80, 0x03, 0x46, 0x52,
    0xb0, 0x7d, 0x20, 0xaa, 0xf0, 0x44, 0x70, 0xad, 0xb5, 0xdd, 0x03, 0x88,
    0x6e, 0xb4, 0x3d, 0xc7, 0x67, 0xfb, 0xfd, 0xe5, 0xf6, 0x11, 0x18, 0x19,
    0x9f, 0x94, 0x87, 0x46, 0x3d, 0x2e, 0xbc, 0xa4, 0xe9, 0xdf, 0x71, 0x85,
    0x5d, 0x7d, 0xef, 0x23, 0x96, 0x48, 0x53, 0xf7, 0x2a, 0x81, 0x4e, 0x77,
    0x5f, 0x0d, 0x23, 0x59, 0xa6, 0x5c, 0x15, 0x64, 0x25, 0x1d, 0x82, 0xf3,
    0xd6, 0x8d, 0x92, 0x20, 0x9a, 0x96, 0x39, 0xb3, 0xb4, 0x84, 0xe3, 0x08,
    0xf1, 0xe4, 0x32, 0x23, 0xe3, 0x93, 0xb2, 0x5a, 0xac, 0x9a, 0x00, 0xa2,
    0x1d, 0x0e, 0xcb, 0x79, 0x0b, 0xc7, 0x8a, 0x72, 0xf9, 0xcf, 0x6f, 0xb2,
    0xed, 0x33, 0xef, 0xc7, 0x15, 0xab, 0x89, 0x58, 0xa2, 0x15, 0x8c, 0xce,
    0x22, 0x7a, 0xd5, 0xa1, 0x08, 0x4a, 0x04, 0x44, 0x05, 0xfd, 0xd5, 0x07,
    0x51, 0x8d, 0x63, 0xd0, 0xf0, 0x8f, 0xdc, 0x55, 0x3c, 0xd7, 0x47, 0x8c,
    0x1a, 0x46, 0xd4, 0x6c, 0x93, 0x03, 0xca, 0x21, 0x14, 0xbb, 0xcd, 0x81,
    0xcf, 0x6a, 0xcc, 0x25, 0x98, 0x7d, 0xeb, 0x4f, 0x6c, 0xeb, 0x7c, 0x10,
    0x25, 0xb1, 0x40, 0xe5, 0x8e, 0xa9, 0x70, 0x94, 0x26, 0x99, 0x2e, 0x36,
    0xef, 0x7c, 0xc5, 0x91, 0x5a, 0xdd, 0x39, 0x3a, 0x88, 0x44, 0xbe, 0x50,
    0x20, 0x77, 0xbd, 0x40, 0x47, 0x8a, 0x46, 0xa2, 0xae, 0xe4, 0x51, 0x0b,
    0x40, 0x5f, 0xbf, 0x8b, 0xeb, 0xba, 0x88, 0x86, 0x64, 0x4a, 0xe8, 0x48,
    0xcc, 0x13, 0x62, 0x89, 0xf9, 0x57, 0x07, 0x48, 0x74, 0xf6, 0x60, 0x84,
    0x1a, 0xea, 0xe6, 0xe5, 0x28, 0x5d, 0x5b, 0x21, 0x14, 0x6a, 0x7c, 0x7e,
    0xdd, 0x3b, 0x4a, 0xcd, 0x20, 0x2b, 0x6d, 0xa5, 0xe1, 0x4e, 0x79, 0x99,
    0xa5, 0x42, 0x81, 0x48, 0xcc, 0x27, 0xf7, 0xfa, 0x2e, 0xb6, 0xbd, 0xf7,
    0x26, 0xf1, 0x84, 0xbd, 0x31, 0x80, 0xaf, 0x35, 0x9e, 0xdd, 0x48, 0x1c,
    0xad, 0x35, 0xda, 0x17, 0x5c, 0x29, 0x11, 0xdd, 0xf1, 0x3a, 0x0b, 0x6f,
    0x64, 0xe8, 0x4c, 0xec, 0x22, 0x1c, 0x8e, 0x02, 0x50, 0x2c, 0xc6, 0x83,
    0x75, 0x0e, 0x0b, 0xc4, 0x92, 0x7e, 0x13, 0x84, 0xe3, 0x38, 0x54, 0x6a,
    0x25, 0x0a, 0x6f, 0x27, 0xc8, 0xbf, 0x15, 0x27, 0xd3, 0x23, 0xf4, 0xde,
    0xb7, 0x48, 0x79, 0xb9, 0x13, 0x11, 0xdd, 0x06, 0xc0, 0x13, 0x3c, 0xd7,
    0xc7, 0x2a, 0x86, 0xb0, 0xeb, 0xeb, 0x0d, 0xd6, 0x49, 0xf5, 0x3a, 0x2c,
    0xfc, 0xdd, 0xa6, 0x33, 0xd5, 0x83, 0x61, 0x18, 0x28, 0xb5, 0x56, 0x4f,
    0xfc, 0x7f, 0x3a, 0xc4, 0x53, 0x2b, 0x51, 0xf0, 0x34, 0x9e, 0xef, 0xa2,
    0xb5, 0xc6, 0x75, 0xe2, 0xdc, 0xba, 0xde, 0x81, 0xa8, 0x2a, 0x11, 0x65,
    0xa3, 0xbc, 0x08, 0xf5, 0xf2, 0x16, 0x90, 0x54, 0x1b, 0x00, 0x5f, 0xe3,
    0x39, 0x3e, 0x33, 0xbf, 0xf7, 0x18, 0x1b, 0x1b, 0xa3, 0x45, 0x06, 0x5b,
    0x87, 0xee, 0x29, 0x9f, 0x6a, 0xbc, 0x4c, 0xd3, 0xe4, 0x17, 0x2f, 0xfd,
    0x16, 0xba, 0x52, 0x4d, 0xd3, 0x4d, 0x00, 0x66, 0x5e, 0xb3, 0xa5, 0xaf,
    0x71, 0x04, 0xa3, 0xa3, 0xa3, 0x58, 0x56, 0xe3, 0x0b, 0x98, 0x9b, 0x9b,
    0xfb, 0x0f, 0x3c, 0x43, 0x26, 0x93, 0x21, 0x9d, 0x4e, 0x03, 0x70, 0xed,
    0xda, 0x35, 0x5e, 0xfc, 0xd5, 0x2f, 0x89, 0xa7, 0xa7, 0xa9, 0x15, 0x3f,
    0x12, 0xe8, 0x18, 0xeb, 0x17, 0x3c, 0xf7, 0x8d, 0xa7, 0x94, 0x6f, 0x35,
    0x86, 0xb4, 0xd6, 0xd8, 0xb6, 0x8d, 0x6d, 0xdb, 0x5c, 0xbd, 0x7a, 0x95,
    0x78, 0x3c, 0xce, 0xe2, 0xe2, 0x22, 0x8b, 0x8b, 0x8b, 0xc4, 0xe3, 0x71,
    0xe2, 0xf1, 0x38, 0x96, 0x65, 0x31, 0x33, 0x33, 0x13, 0xf4, 0x57, 0xc7,
    0x56, 0x75, 0x80, 0xc0, 0x46, 0xb5, 0x5a, 0x05, 0xe5, 0xe2, 0x38, 0x1d,
    0x4d, 0x17, 0x96, 0x96, 0x4a, 0x78, 0xfb, 0xc6, 0x56, 0xe0, 0x76, 0x90,
    0x48, 0x00, 0xdd, 0xdd, 0xdd, 0xcc, 0xcf, 0xcf, 0x73, 0xf4, 0xe8, 0x51,
    0x00, 0xa6, 0xa7, 0xa7, 0xe9, 0xef, 0xef, 0xe7, 0xd0, 0xa1, 0x43, 0xe4,
    0x72, 0x39, 0x86, 0x87, 0x87, 0x99, 0x98, 0x98, 0x60, 0x6a, 0x6a, 0x8a,
    0x13, 0x27, 0x4e, 0x60, 0x9a, 0x26, 0xb3, 0xb3, 0xb3, 0x84, 0xc3, 0x61,
    0x2a, 0x95, 0x46, 0x11, 0x5b, 0xb5, 0xe5, 0xd4, 0x7a, 0x9a, 0xfc, 0x35,
    0x45, 0x00, 0xa0, 0xb8, 0xb4, 0x35, 0x88, 0x80, 0xe3, 0x38, 0xc1, 0xc2,
    0x5c, 0x2e, 0x17, 0xe8, 0x4c, 0x4d, 0x4d, 0x01, 0x8d, 0x73, 0xcd, 0xe5,
    0x72, 0x98, 0xa6, 0x19, 0xe8, 0x98, 0xa6, 0x49, 0x26, 0x93, 0x21, 0x97,
    0xcb, 0xe1, 0xfb, 0x7e, 0x60, 0xc3, 0xb2, 0x2c, 0xb4, 0x97, 0xc6, 0x50,
    0xcd, 0x00, 0x2d, 0x11, 0x38, 0xf7, 0x9d, 0x27, 0xd4, 0xe8, 0xe8, 0xa8,
    0xac, 0x8f, 0x00, 0xc0, 0xd0, 0xd0, 0x10, 0x73, 0x73, 0x73, 0x98, 0xa6,
    0xc9, 0xf0, 0xf0, 0x30, 0x00, 0xc7, 0x8f, 0x1f, 0x67, 0x68, 0x68, 0x88,
    0x83, 0x07, 0x0f, 0x02, 0x30, 0x38, 0x38, 0xc8, 0xc4, 0xc4, 0x04, 0x57,
    0xae, 0x5c, 0x61, 0xdf, 0xbe, 0x7d, 0x14, 0x0a, 0x85, 0xc0, 0x86, 0x6d,
    0xdb, 0x20, 0xba, 0xe5, 0xbe, 0xd8, 0xf6, 0x4e, 0xb8, 0x1e, 0x60, 0x75,
    0x17, 0x27, 0x4f, 0x9e, 0x04, 0x20, 0x9f, 0xcf, 0x03, 0x90, 0xcd, 0x66,
    0x03, 0xfd, 0x7c, 0x3e, 0x4f, 0x22, 0x91, 0x20, 0x9b, 0xcd, 0x92, 0xcd,
    0x66, 0xc9, 0xe7, 0xf3, 0xd4, 0x6a, 0xb5, 0x26, 0x00, 0xf5, 0x6f, 0x65,
    0xfd, 0xae, 0x00, 0xa5, 0x52, 0x89, 0x4b, 0x97, 0x2e, 0x05, 0xfd, 0xf3,
    0xe7, 0xcf, 0xb7, 0x53, 0xdd, 0x94, 0x54, 0xab, 0xd5, 0x0d, 0xc7, 0xdb,
    0x02, 0x1c, 0x3e, 0x7c, 0xf8, 0x5d, 0x39, 0xdc, 0xac, 0xdc, 0xf3, 0x56,
    0x0c, 0xf0, 0xfc, 0xcf, 0x2e, 0x08, 0x86, 0x87, 0xd6, 0x26, 0x9e, 0xdc,
    0x64, 0x7b, 0xcf, 0x5e, 0xa2, 0x91, 0x08, 0xdd, 0x99, 0xfb, 0xf0, 0xbc,
    0x1a, 0x22, 0x42, 0x2c, 0x92, 0xc6, 0x76, 0x5d, 0x6a, 0x75, 0x8b, 0x52,
    0xa9, 0xc2, 0x9d, 0x52, 0x95, 0x5a, 0xdd, 0xe2, 0x2b, 0x63, 0x0f, 0xdd,
    0xf5, 0x6a, 0xbe, 0x29, 0x80, 0x55, 0xf9, 0xfe, 0xb9, 0x9f, 0x88, 0xe5,
    0xe4, 0x59, 0x36, 0x73, 0x80, 0xd7, 0x54, 0x8e, 0x45, 0x84, 0x74, 0xd7,
    0x7b, 0x48, 0x75, 0x3c, 0x40, 0x26, 0xf5, 0x01, 0x1e, 0x39, 0xf6, 0xc9,
    0x4d, 0xfd, 0x9c, 0xbc, 0x23, 0x80, 0xf5, 0xf2, 0xad, 0x67, 0x7f, 0x28,
    0x1f, 0xda, 0xbb, 0x1b, 0x88, 0xf0, 0xda, 0x6b, 0x7f, 0xa1, 0xab, 0x37,
    0xcd, 0xe3, 0x27, 0x4e, 0x6d, 0xfa, 0x8f, 0xe8, 0x5d, 0x03, 0xfc, 0xb7,
    0xa4, 0xa5, 0x10, 0xfd, 0x1f, 0xe0, 0x7f, 0x0e, 0xe0, 0x5f, 0x18, 0xb3,
    0x77, 0xfb, 0xda, 0x81, 0xbb, 0x9f, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45,
    0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};


/*
 *  Constructs a ClientWindowGui as a child of 'parent', with the
 *  name 'name' and widget flags set to 'f'.
 *
 */
ClientWindowGui::ClientWindowGui( QWidget* parent, const char* name, WFlags fl )
    : QMainWindow( parent, name, fl ),
      image1( (const char **) image1_data )
{
    (void)statusBar();
    QImage img;
    img.loadFromData( image0_data, sizeof( image0_data ), "PNG" );
    image0 = img;
    img.loadFromData( image2_data, sizeof( image2_data ), "PNG" );
    image2 = img;
    if ( !name )
	setName( "ClientWindowGui" );
    setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)7, (QSizePolicy::SizeType)7, 0, 0, sizePolicy().hasHeightForWidth() ) );
    setBackgroundOrigin( QMainWindow::AncestorOrigin );
    setIcon( image0 );
    setCentralWidget( new QWidget( this, "qt_central_widget" ) );
    ClientWindowGuiLayout = new QGridLayout( centralWidget(), 1, 1, 0, 6, "ClientWindowGuiLayout"); 

    s1 = new QSplitter( centralWidget(), "s1" );
    s1->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)7, (QSizePolicy::SizeType)7, 0, 0, s1->sizePolicy().hasHeightForWidth() ) );
    s1->setOrientation( QSplitter::Horizontal );

    s2 = new QSplitter( s1, "s2" );
    s2->setOrientation( QSplitter::Vertical );

    groupBox1 = new QGroupBox( s2, "groupBox1" );
    groupBox1->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)7, (QSizePolicy::SizeType)7, 0, 0, groupBox1->sizePolicy().hasHeightForWidth() ) );
    groupBox1->setFrameShadow( QGroupBox::Sunken );
    groupBox1->setColumnLayout(0, Qt::Vertical );
    groupBox1->layout()->setSpacing( 6 );
    groupBox1->layout()->setMargin( 3 );
    groupBox1Layout = new QGridLayout( groupBox1->layout() );
    groupBox1Layout->setAlignment( Qt::AlignTop );

    ListView_players = new PlayerTable( groupBox1, "ListView_players" );
    ListView_players->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)7, (QSizePolicy::SizeType)7, 0, 0, ListView_players->sizePolicy().hasHeightForWidth() ) );
    ListView_players->setMinimumSize( QSize( 0, 10 ) );

    groupBox1Layout->addMultiCellWidget( ListView_players, 0, 0, 0, 2 );

    whoBox2 = new QComboBox( FALSE, groupBox1, "whoBox2" );

    groupBox1Layout->addWidget( whoBox2, 1, 1 );

    whoBox1 = new QComboBox( FALSE, groupBox1, "whoBox1" );

    groupBox1Layout->addWidget( whoBox1, 1, 0 );

    whoOpenCheck = new QCheckBox( groupBox1, "whoOpenCheck" );

    groupBox1Layout->addWidget( whoOpenCheck, 1, 2 );

    TabWidget_mini_2 = new QTabWidget( s2, "TabWidget_mini_2" );
    TabWidget_mini_2->setTabPosition( QTabWidget::Bottom );

    rooms = new QWidget( TabWidget_mini_2, "rooms" );
    roomsLayout = new QGridLayout( rooms, 1, 1, 0, 6, "roomsLayout"); 

    LeaveRoomButton = new QPushButton( rooms, "LeaveRoomButton" );
    LeaveRoomButton->setMaximumSize( QSize( 22, 22 ) );
    LeaveRoomButton->setPixmap( image1 );

    roomsLayout->addWidget( LeaveRoomButton, 1, 1 );

    RoomList = new QListBox( rooms, "RoomList" );

    roomsLayout->addMultiCellWidget( RoomList, 0, 0, 0, 1 );
    TabWidget_mini_2->insertTab( rooms, QString::fromLatin1("") );

    messages = new QWidget( TabWidget_mini_2, "messages" );
    messagesLayout = new QVBoxLayout( messages, 0, 6, "messagesLayout"); 

    MultiLineEdit3 = new QTextBrowser( messages, "MultiLineEdit3" );
    MultiLineEdit3->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)7, (QSizePolicy::SizeType)7, 0, 0, MultiLineEdit3->sizePolicy().hasHeightForWidth() ) );
    messagesLayout->addWidget( MultiLineEdit3 );

    pb_releaseTalkTabs = new QPushButton( messages, "pb_releaseTalkTabs" );
    messagesLayout->addWidget( pb_releaseTalkTabs );
    TabWidget_mini_2->insertTab( messages, QString::fromLatin1("") );

    s3 = new QSplitter( s1, "s3" );
    s3->setOrientation( QSplitter::Vertical );

    groupBox2 = new QGroupBox( s3, "groupBox2" );
    groupBox2->setColumnLayout(0, Qt::Vertical );
    groupBox2->layout()->setSpacing( 6 );
    groupBox2->layout()->setMargin( 3 );
    groupBox2Layout = new QGridLayout( groupBox2->layout() );
    groupBox2Layout->setAlignment( Qt::AlignTop );

    ListView_games = new GamesTable( groupBox2, "ListView_games" );
    ListView_games->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)7, (QSizePolicy::SizeType)7, 0, 0, ListView_games->sizePolicy().hasHeightForWidth() ) );

    groupBox2Layout->addWidget( ListView_games, 0, 0 );

    QWidget* privateLayoutWidget = new QWidget( s3, "layout1" );
    layout1 = new QGridLayout( privateLayoutWidget, 1, 1, 0, 0, "layout1"); 

    MultiLineEdit2 = new QTextBrowser( privateLayoutWidget, "MultiLineEdit2" );
    MultiLineEdit2->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)7, (QSizePolicy::SizeType)7, 0, 0, MultiLineEdit2->sizePolicy().hasHeightForWidth() ) );

    layout1->addWidget( MultiLineEdit2, 0, 0 );

    cb_cmdLine = new QComboBox( FALSE, privateLayoutWidget, "cb_cmdLine" );
    cb_cmdLine->setEditable( TRUE );
    cb_cmdLine->setInsertionPolicy( QComboBox::AtTop );

    layout1->addWidget( cb_cmdLine, 1, 0 );

    ClientWindowGuiLayout->addWidget( s1, 0, 0 );

    // actions
    fileOpen = new QAction( this, "fileOpen" );
    helpManual = new QAction( this, "helpManual" );
    helpAboutApp = new QAction( this, "helpAboutApp" );
    Disconnect = new QAction( this, "Disconnect" );
    Disconnect->setToggleAction( FALSE );
    Disconnect->setOn( FALSE );
    Disconnect->setEnabled( TRUE );
    setLookingMode = new QAction( this, "setLookingMode" );
    setLookingMode->setToggleAction( TRUE );
    setOpenMode = new QAction( this, "setOpenMode" );
    setOpenMode->setToggleAction( TRUE );
    computerPlay = new QAction( this, "computerPlay" );
    refreshPlayers = new QAction( this, "refreshPlayers" );
    refreshGames = new QAction( this, "refreshGames" );
    setQuietMode = new QAction( this, "setQuietMode" );
    setQuietMode->setToggleAction( TRUE );
    Connect = new QAction( this, "Connect" );
    Connect->setToggleAction( FALSE );
    Connect->setOn( FALSE );
    Connect->setEnabled( TRUE );
    setPreferences = new QAction( this, "setPreferences" );
    fileQuit = new QAction( this, "fileQuit" );
    fileNewBoard = new QAction( this, "fileNewBoard" );
    viewToolBar = new QAction( this, "viewToolBar" );
    viewToolBar->setToggleAction( TRUE );
    viewToolBar->setOn( TRUE );
    editServers = new QAction( this, "editServers" );
    viewMenuBar = new QAction( this, "viewMenuBar" );
    viewMenuBar->setToggleAction( TRUE );
    viewMenuBar->setOn( TRUE );
    viewStatusBar = new QAction( this, "viewStatusBar" );
    viewStatusBar->setToggleAction( TRUE );
    viewStatusBar->setOn( TRUE );
    helpSoundInfo = new QAction( this, "helpSoundInfo" );
    helpAboutQt = new QAction( this, "helpAboutQt" );
    fileNew = new QAction( this, "fileNew" );
    viewUserToolBar = new QAction( this, "viewUserToolBar" );
    viewUserToolBar->setToggleAction( TRUE );
    viewUserToolBar->setOn( TRUE );
    Seek = new QAction( this, "Seek" );
    Seek->setToggleAction( TRUE );
    helpNewVersion = new QAction( this, "helpNewVersion" );


    // toolbars
    Toolbar = new QToolBar( QString(""), this, DockTop ); 

    Toolbar->setHorizontallyStretchable( FALSE );
    fileNewBoard->addTo( Toolbar );
    fileOpen->addTo( Toolbar );
    computerPlay->addTo( Toolbar );
    Toolbar->addSeparator();

    toolConnect = new QToolButton( Toolbar, "toolConnect" );
    toolConnect->setToggleButton( TRUE );
    toolConnect->setIconSet( QIconSet( image2 ) );

    cb_connect = new QComboBox( FALSE, Toolbar, "cb_connect" );
    cb_connect->setFocusPolicy( QComboBox::NoFocus );
    Toolbar->addSeparator();

    toolSeek = new QToolButton( Toolbar, "toolSeek" );
    toolSeek->setToggleButton( TRUE );

    cb_seek_handicap = new QComboBox( FALSE, Toolbar, "cb_seek_handicap" );
    setLookingMode->addTo( Toolbar );
    setQuietMode->addTo( Toolbar );
    setOpenMode->addTo( Toolbar );
    Toolbar->addSeparator();
    refreshPlayers->addTo( Toolbar );
    refreshGames->addTo( Toolbar );
    UserToolbar = new QToolBar( QString(""), this, DockTop ); 



    // menubar
    menuBar = new QMenuBar( this, "menuBar" );


    fileMenu = new QPopupMenu( this );
    fileNewBoard->addTo( fileMenu );
    fileNew->addTo( fileMenu );
    fileOpen->addTo( fileMenu );
    computerPlay->addTo( fileMenu );
    fileMenu->insertSeparator();
    fileQuit->addTo( fileMenu );
    menuBar->insertItem( QString(""), fileMenu, 1 );

    PopupMenu = new QPopupMenu( this );
    Connect->addTo( PopupMenu );
    Disconnect->addTo( PopupMenu );
    PopupMenu->insertSeparator();
    editServers->addTo( PopupMenu );
    menuBar->insertItem( QString(""), PopupMenu, 2 );

    PopupMenu_2 = new QPopupMenu( this );
    setPreferences->addTo( PopupMenu_2 );
    PopupMenu_2->insertSeparator();
    setLookingMode->addTo( PopupMenu_2 );
    setOpenMode->addTo( PopupMenu_2 );
    setQuietMode->addTo( PopupMenu_2 );
    menuBar->insertItem( QString(""), PopupMenu_2, 3 );

    PopupMenu_3 = new QPopupMenu( this );
    viewToolBar->addTo( PopupMenu_3 );
    viewUserToolBar->addTo( PopupMenu_3 );
    viewMenuBar->addTo( PopupMenu_3 );
    viewStatusBar->addTo( PopupMenu_3 );
    menuBar->insertItem( QString(""), PopupMenu_3, 4 );

    helpMenu = new QPopupMenu( this );
    helpManual->addTo( helpMenu );
    helpMenu->insertSeparator();
    helpSoundInfo->addTo( helpMenu );
    helpMenu->insertSeparator();
    helpAboutApp->addTo( helpMenu );
    helpAboutQt->addTo( helpMenu );
    helpNewVersion->addTo( helpMenu );
    menuBar->insertItem( QString(""), helpMenu, 5 );

    languageChange();
    resize( QSize(773, 591).expandedTo(minimumSizeHint()) );
    clearWState( WState_Polished );

    // signals and slots connections
    connect( setQuietMode, SIGNAL( activated() ), this, SLOT( slot_cbquiet() ) );
    connect( setOpenMode, SIGNAL( activated() ), this, SLOT( slot_cbopen() ) );
    connect( setLookingMode, SIGNAL( activated() ), this, SLOT( slot_cblooking() ) );
    connect( refreshGames, SIGNAL( activated() ), this, SLOT( slot_pbrefreshgames() ) );
    connect( refreshPlayers, SIGNAL( activated() ), this, SLOT( slot_pbrefreshplayers() ) );
    connect( pb_releaseTalkTabs, SIGNAL( clicked() ), this, SLOT( slot_pbRelTabs() ) );
    connect( RoomList, SIGNAL( doubleClicked(QListBoxItem*) ), this, SLOT( slot_RoomListClicked(QListBoxItem*) ) );
    connect( LeaveRoomButton, SIGNAL( clicked() ), this, SLOT( slot_leaveRoom() ) );
    connect( cb_connect, SIGNAL( activated(const QString&) ), this, SLOT( slot_cbconnect(const QString&) ) );
    connect( toolConnect, SIGNAL( toggled(bool) ), this, SLOT( slot_connect(bool) ) );
    connect( toolSeek, SIGNAL( toggled(bool) ), this, SLOT( slot_seek(bool) ) );
}

/*
 *  Destroys the object and frees any allocated resources
 */
ClientWindowGui::~ClientWindowGui()
{
    // no need to delete child widgets, Qt does it all for us
}

/*
 *  Sets the strings of the subwidgets using the current
 *  language.
 */
void ClientWindowGui::languageChange()
{
    setCaption( tr( "qGo Client V2" ) );
    groupBox1->setTitle( tr( "Players" ) );
    whoBox2->clear();
    whoBox2->insertItem( QString::null );
    whoBox2->insertItem( tr( "1p-9p" ) );
    whoBox2->insertItem( tr( "9d" ) );
    whoBox2->insertItem( tr( "8d" ) );
    whoBox2->insertItem( tr( "7d" ) );
    whoBox2->insertItem( tr( "6d" ) );
    whoBox2->insertItem( tr( "5d" ) );
    whoBox2->insertItem( tr( "4d" ) );
    whoBox2->insertItem( tr( "3d" ) );
    whoBox2->insertItem( tr( "2d" ) );
    whoBox2->insertItem( tr( "1d" ) );
    whoBox2->insertItem( tr( "1k" ) );
    whoBox2->insertItem( tr( "2k" ) );
    whoBox2->insertItem( tr( "3k" ) );
    whoBox2->insertItem( tr( "4k" ) );
    whoBox2->insertItem( tr( "5k" ) );
    whoBox2->insertItem( tr( "6k" ) );
    whoBox2->insertItem( tr( "7k" ) );
    whoBox2->insertItem( tr( "8k" ) );
    whoBox2->insertItem( tr( "9k" ) );
    whoBox2->insertItem( tr( "10k" ) );
    whoBox2->insertItem( tr( "11k" ) );
    whoBox2->insertItem( tr( "12k" ) );
    whoBox2->insertItem( tr( "13k" ) );
    whoBox2->insertItem( tr( "14k" ) );
    whoBox2->insertItem( tr( "15k" ) );
    whoBox2->insertItem( tr( "16k" ) );
    whoBox2->insertItem( tr( "17k" ) );
    whoBox2->insertItem( tr( "18k" ) );
    whoBox2->insertItem( tr( "19k" ) );
    whoBox2->insertItem( tr( "20k" ) );
    whoBox2->insertItem( tr( "21k" ) );
    whoBox2->insertItem( tr( "22k" ) );
    whoBox2->insertItem( tr( "23k" ) );
    whoBox2->insertItem( tr( "24k" ) );
    whoBox2->insertItem( tr( "25k" ) );
    whoBox2->insertItem( tr( "26k" ) );
    whoBox2->insertItem( tr( "27k" ) );
    whoBox2->insertItem( tr( "28k" ) );
    whoBox2->insertItem( tr( "29k" ) );
    whoBox2->insertItem( tr( "30k" ) );
    whoBox2->setCurrentItem( 0 );
    QToolTip::add( whoBox2, tr( "Select players rank boundaries" ) );
    QWhatsThis::add( whoBox2, tr( "Select players ranks boundaries\n"
"\n"
"Use these lists to select the rank of players you want to see in the list\n"
"This will take effect after refreshing the players list." ) );
    whoBox1->clear();
    whoBox1->insertItem( QString::null );
    whoBox1->insertItem( tr( "1p-9p" ) );
    whoBox1->insertItem( tr( "9d" ) );
    whoBox1->insertItem( tr( "8d" ) );
    whoBox1->insertItem( tr( "7d" ) );
    whoBox1->insertItem( tr( "6d" ) );
    whoBox1->insertItem( tr( "5d" ) );
    whoBox1->insertItem( tr( "4d" ) );
    whoBox1->insertItem( tr( "3d" ) );
    whoBox1->insertItem( tr( "2d" ) );
    whoBox1->insertItem( tr( "1d" ) );
    whoBox1->insertItem( tr( "1k" ) );
    whoBox1->insertItem( tr( "2k" ) );
    whoBox1->insertItem( tr( "3k" ) );
    whoBox1->insertItem( tr( "4k" ) );
    whoBox1->insertItem( tr( "5k" ) );
    whoBox1->insertItem( tr( "6k" ) );
    whoBox1->insertItem( tr( "7k" ) );
    whoBox1->insertItem( tr( "8k" ) );
    whoBox1->insertItem( tr( "9k" ) );
    whoBox1->insertItem( tr( "10k" ) );
    whoBox1->insertItem( tr( "11k" ) );
    whoBox1->insertItem( tr( "12k" ) );
    whoBox1->insertItem( tr( "13k" ) );
    whoBox1->insertItem( tr( "14k" ) );
    whoBox1->insertItem( tr( "15k" ) );
    whoBox1->insertItem( tr( "16k" ) );
    whoBox1->insertItem( tr( "17k" ) );
    whoBox1->insertItem( tr( "18k" ) );
    whoBox1->insertItem( tr( "19k" ) );
    whoBox1->insertItem( tr( "20k" ) );
    whoBox1->insertItem( tr( "21k" ) );
    whoBox1->insertItem( tr( "22k" ) );
    whoBox1->insertItem( tr( "23k" ) );
    whoBox1->insertItem( tr( "24k" ) );
    whoBox1->insertItem( tr( "25k" ) );
    whoBox1->insertItem( tr( "26k" ) );
    whoBox1->insertItem( tr( "27k" ) );
    whoBox1->insertItem( tr( "28k" ) );
    whoBox1->insertItem( tr( "29k" ) );
    whoBox1->insertItem( tr( "30k" ) );
    whoBox1->setCurrentItem( 0 );
    QToolTip::add( whoBox1, tr( "Select players rank boundaries" ) );
    QWhatsThis::add( whoBox1, tr( "Select players ranks boundaries\n"
"\n"
"Use these lists to select the rank of players you want to see in the list\n"
"This will take effect after refreshing the players list." ) );
    whoOpenCheck->setText( tr( "open" ) );
    QToolTip::add( whoOpenCheck, tr( "toggle for displaying only open players" ) );
    QWhatsThis::add( whoOpenCheck, tr( "Open players\n"
"\n"
"Check this box if you want the list to display only open players (uncheck if you want all players).\n"
"This will take effect after refreshing the players list." ) );
    LeaveRoomButton->setText( QString::null );
    TabWidget_mini_2->changeTab( rooms, tr( "Rooms*" ) );
    pb_releaseTalkTabs->setText( tr( "Close all talk tabs" ) );
    TabWidget_mini_2->changeTab( messages, tr( "Msg*" ) );
    groupBox2->setTitle( tr( "Games" ) );
    QToolTip::add( MultiLineEdit2, tr( "relevant messages from/to server" ) );
    fileOpen->setText( tr( "Open" ) );
    fileOpen->setMenuText( tr( "&Open..." ) );
    fileOpen->setWhatsThis( tr( "Open\n"
"\n"
"Open a sgf file." ) );
    fileOpen->setAccel( tr( "Ctrl+O" ) );
    helpManual->setText( tr( "Manual" ) );
    helpManual->setMenuText( tr( "&Manual" ) );
    helpManual->setToolTip( tr( "Opens the manual" ) );
    helpManual->setWhatsThis( tr( "Help\n"
"\n"
"Opens the manual of the application." ) );
    helpManual->setAccel( tr( "F1" ) );
    helpAboutApp->setText( tr( "About" ) );
    helpAboutApp->setMenuText( tr( "&About" ) );
    helpAboutApp->setToolTip( tr( "About the application." ) );
    helpAboutApp->setWhatsThis( tr( "About\n"
"\n"
"About the application." ) );
    helpAboutApp->setAccel( QString::null );
    Disconnect->setText( tr( "Disconnect" ) );
    Disconnect->setMenuText( tr( "&Disconnect" ) );
    Disconnect->setToolTip( tr( "Disconnect from server" ) );
    Disconnect->setWhatsThis( tr( "Disconnect from server" ) );
    setLookingMode->setText( tr( "Looking" ) );
    setLookingMode->setMenuText( tr( "&Looking" ) );
    setLookingMode->setToolTip( tr( "toggles looking for matches" ) );
    setLookingMode->setWhatsThis( tr( "If checked then you are looking for matches, that means you are ready to play. After refreshing the player table having a '!' mark indicates to be looking for matches. Clicking this checkbox toggles the mode. You have to be open too, if you are looking. Thus, the Go server sets you open for matches (no 'X')!" ) );
    setOpenMode->setText( tr( "Open" ) );
    setOpenMode->setMenuText( tr( "&Open" ) );
    setOpenMode->setToolTip( tr( "toggles open for matches" ) );
    setOpenMode->setWhatsThis( tr( "If checked you are open for matches. After refreshing the player table having a 'X' mark indicates to be NOT open for matches. Clicking this checkbox toggles the mode." ) );
    computerPlay->setText( tr( "Play with program" ) );
    computerPlay->setMenuText( tr( "&Play with program" ) );
    computerPlay->setStatusTip( tr( "Play with program" ) );
    computerPlay->setWhatsThis( tr( "Play with a program\n"
"\n"
"Sets a playing session with a pGo program using GTP (like GNUGO)" ) );
    computerPlay->setAccel( tr( "Ctrl+P" ) );
    refreshPlayers->setText( tr( "Refresh players" ) );
    refreshPlayers->setMenuText( tr( "Refresh players" ) );
    refreshPlayers->setToolTip( tr( "Get new players table from server" ) );
    refreshPlayers->setWhatsThis( tr( "Get new players table from server" ) );
    refreshGames->setText( tr( "Refresh Games" ) );
    refreshGames->setMenuText( tr( "Refresh Games" ) );
    refreshGames->setToolTip( tr( "Get new games table from server" ) );
    refreshGames->setWhatsThis( tr( "Get new games table from server" ) );
    setQuietMode->setText( tr( "Quiet" ) );
    setQuietMode->setMenuText( tr( "&Quiet" ) );
    setQuietMode->setToolTip( tr( "toggles system messages" ) );
    setQuietMode->setWhatsThis( tr( "If checked then you don't receive system messages, that means you are not informed about connecting/disconnecting players, started/finished games etc. Clicking this checkbox toggles the mode. To be quiet is indicated with a 'Q' in the playertable.\n"
"\n"
"Note : some features cannot work if set to quiet (checked box):\n"
"	- sound when watched players enter/leave\n"
"	- update of player/gamestable" ) );
    Connect->setText( tr( "Connect" ) );
    Connect->setMenuText( tr( "&Connect" ) );
    Connect->setToolTip( tr( "Connects to the server" ) );
    Connect->setStatusTip( tr( "Connects to the server" ) );
    Connect->setWhatsThis( tr( "Connects to the server" ) );
    setPreferences->setText( tr( "Preferences" ) );
    setPreferences->setMenuText( tr( "Preferences" ) );
    setPreferences->setToolTip( tr( "Edit the preferences" ) );
    setPreferences->setWhatsThis( tr( "Preferences\n"
"\n"
"Edit the applications preferences." ) );
    setPreferences->setAccel( tr( "Alt+P" ) );
    fileQuit->setText( tr( "Exit" ) );
    fileQuit->setMenuText( tr( "E&xit" ) );
    fileQuit->setToolTip( tr( "Quits the application" ) );
    fileQuit->setWhatsThis( tr( "Exit\n"
"\n"
"Quits the application." ) );
    fileQuit->setAccel( tr( "Ctrl+Q" ) );
    fileNewBoard->setText( tr( "New Board 19x19" ) );
    fileNewBoard->setMenuText( tr( "New &Board 19x19" ) );
    fileNewBoard->setToolTip( tr( "Creates a new board with size 19x19" ) );
    fileNewBoard->setWhatsThis( tr( "New\n"
"\n"
"Creates a new 19x19 board." ) );
    fileNewBoard->setAccel( tr( "Ctrl+B" ) );
    viewToolBar->setText( tr( "ToolBar" ) );
    viewToolBar->setMenuText( tr( "&ToolBar" ) );
    viewToolBar->setToolTip( tr( "Enables/disables the toolbar" ) );
    viewToolBar->setWhatsThis( tr( "Navigation toolbar\n"
"\n"
"Enables/disables the toolbar." ) );
    editServers->setText( tr( "Edit servers" ) );
    editServers->setMenuText( tr( "&Edit servers" ) );
    editServers->setWhatsThis( tr( "Edit servers" ) );
    viewMenuBar->setText( tr( "Menubar" ) );
    viewMenuBar->setMenuText( tr( "&Menubar" ) );
    viewMenuBar->setToolTip( tr( "Enables/disables the menubar" ) );
    viewMenuBar->setAccel( tr( "F7" ) );
    viewStatusBar->setText( tr( "Statusbar" ) );
    viewStatusBar->setMenuText( tr( "&Statusbar" ) );
    viewStatusBar->setToolTip( tr( "Enables/disables the statusbar" ) );
    viewStatusBar->setWhatsThis( tr( "Statusbar\n"
"\n"
"Enables/disables the statusbar." ) );
    helpSoundInfo->setText( tr( "Sound" ) );
    helpSoundInfo->setMenuText( tr( "&Sound" ) );
    helpSoundInfo->setToolTip( tr( "Short info on sound availability" ) );
    helpSoundInfo->setWhatsThis( tr( "Sound Info\n"
"\n"
"Views a message box with a short comment about sound." ) );
    helpAboutQt->setText( tr( "About Qt" ) );
    helpAboutQt->setMenuText( tr( "About &Qt" ) );
    helpAboutQt->setWhatsThis( tr( "About Qt\n"
"\n"
"About Qt." ) );
    fileNew->setText( tr( "New Board" ) );
    fileNew->setMenuText( tr( "&New Board" ) );
    fileNew->setWhatsThis( tr( "Creates a new board" ) );
    fileNew->setAccel( tr( "Ctrl+N" ) );
    viewUserToolBar->setText( tr( "View user toolbar" ) );
    viewUserToolBar->setMenuText( tr( "View &user toolbar" ) );
    Seek->setText( tr( "Action" ) );
    Seek->setMenuText( tr( "Action" ) );
    Seek->setToolTip( tr( "Seek game" ) );
    Seek->setWhatsThis( tr( "Seek game\n"
"\n"
"Use this button to 'seek' a game, with the given time settings (popup menu), and handicap range (list beside)\n"
"The server will automatically launch a game against an opponent with matching settings." ) );
    helpNewVersion->setText( tr( "New version message" ) );
    helpNewVersion->setToolTip( tr( "shows new version message" ) );
    helpNewVersion->setWhatsThis( tr( "new version message\n"
"\n"
"displays the message box that appears at launch of a new version" ) );
    helpNewVersion->setMenuText(tr( "New version message" ));
    Toolbar->setLabel( tr( "main toolbar" ) );
    toolConnect->setText( QString::null );
    QWhatsThis::add( toolConnect, tr( "Connect\n"
"\n"
"Connect with/Disconnect from selected Go server." ) );
    QToolTip::add( cb_connect, tr( "choose server" ) );
    QWhatsThis::add( cb_connect, tr( "chose Go server to connect to or use 'Preferences' to add/change a Go server entry" ) );
    toolSeek->setText( QString::null );
    QToolTip::add( toolSeek, tr( "Seek game" ) );
    QWhatsThis::add( toolSeek, tr( "Seek game\n"
"\n"
"Use this button to 'seek' a game, with the given time settings (popup menu), and handicap range (list beside)\n"
"The server will automatically launch a game against an opponent with matching settings." ) );
    cb_seek_handicap->clear();
    cb_seek_handicap->insertItem( tr( "even" ) );
    cb_seek_handicap->insertItem( tr( "within 2 stones" ) );
    cb_seek_handicap->insertItem( tr( "within 5 stones" ) );
    cb_seek_handicap->insertItem( tr( "anyone" ) );
    cb_seek_handicap->insertItem( tr( "same or stronger" ) );
    cb_seek_handicap->insertItem( tr( "same or weaker" ) );
    QToolTip::add( cb_seek_handicap, tr( "Set the handicap range you want for seeking games" ) );
    QWhatsThis::add( cb_seek_handicap, tr( "handicap range\n"
"\n"
"Set the handicap range you wish when seeking a game. See 'seek' button for more" ) );
    UserToolbar->setLabel( tr( "user defined toolbar" ) );
    if (menuBar->findItem(1))
        menuBar->findItem(1)->setText( tr( "&File" ) );
    if (menuBar->findItem(2))
        menuBar->findItem(2)->setText( tr( "&Connections" ) );
    if (menuBar->findItem(3))
        menuBar->findItem(3)->setText( tr( "&Settings" ) );
    if (menuBar->findItem(4))
        menuBar->findItem(4)->setText( tr( "&View" ) );
    if (menuBar->findItem(5))
        menuBar->findItem(5)->setText( tr( "&Help" ) );
}

void ClientWindowGui::slot_cbquiet()
{
    qWarning( "ClientWindowGui::slot_cbquiet(): Not implemented yet" );
}

void ClientWindowGui::slot_cbopen()
{
    qWarning( "ClientWindowGui::slot_cbopen(): Not implemented yet" );
}

void ClientWindowGui::slot_cblooking()
{
    qWarning( "ClientWindowGui::slot_cblooking(): Not implemented yet" );
}

void ClientWindowGui::slot_pbrefreshgames()
{
    qWarning( "ClientWindowGui::slot_pbrefreshgames(): Not implemented yet" );
}

void ClientWindowGui::slot_pbrefreshplayers()
{
    qWarning( "ClientWindowGui::slot_pbrefreshplayers(): Not implemented yet" );
}

void ClientWindowGui::slot_pbuser1()
{
    qWarning( "ClientWindowGui::slot_pbuser1(): Not implemented yet" );
}

void ClientWindowGui::slot_pbuser2()
{
    qWarning( "ClientWindowGui::slot_pbuser2(): Not implemented yet" );
}

void ClientWindowGui::slot_pbuser3()
{
    qWarning( "ClientWindowGui::slot_pbuser3(): Not implemented yet" );
}

void ClientWindowGui::slot_pbuser4()
{
    qWarning( "ClientWindowGui::slot_pbuser4(): Not implemented yet" );
}

void ClientWindowGui::slot_pbRelTabs()
{
    qWarning( "ClientWindowGui::slot_pbRelTabs(): Not implemented yet" );
}

void ClientWindowGui::slot_RoomListClicked(QListBoxItem*)
{
    qWarning( "ClientWindowGui::slot_RoomListClicked(QListBoxItem*): Not implemented yet" );
}

void ClientWindowGui::slot_leaveRoom()
{
    qWarning( "ClientWindowGui::slot_leaveRoom(): Not implemented yet" );
}

void ClientWindowGui::slot_cbconnect(const QString&)
{
    qWarning( "ClientWindowGui::slot_cbconnect(const QString&): Not implemented yet" );
}

void ClientWindowGui::slot_connect(bool)
{
    qWarning( "ClientWindowGui::slot_connect(bool): Not implemented yet" );
}

void ClientWindowGui::slot_seek(bool)
{
    qWarning( "ClientWindowGui::slot_seek(bool): Not implemented yet" );
}

#include "clientwindow_gui.moc"
